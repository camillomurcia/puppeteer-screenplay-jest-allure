{"uid":"8712d041048e09ec","name":"should display Puppeter text on page title","fullName":"Open Page of differents webSite.should display Puppeter text on page title","historyId":"b90e0d2a30f8ea61ca8e4eaeab6cca34","time":{"start":1657158186487,"stop":1657158187305,"duration":818},"description":"","descriptionHtml":"","status":"failed","statusMessage":"Error: expect(received).toContain(expected) // indexOf\n                \n                Expected substring: \"Puppeter\"\n                Received string:    \"\n                !function(){function t(t){document.documentElement.setAttribute(\\\"data-theme\\\",t)}var e=function(){var t=null;try{t=localStorage.getItem(\\\"theme\\\")}catch(t){}return t}();t(null!==e?e:\\\"light\\\")}()Skip to main contentPuppeteer15.3.1Next15.3.115.3.0ctrlKPuppeteerVersionsNext15.3.115.3.0← Back to main menuPuppeteerFAQTroubleshootingContributingChromium SupportAPIPuppeteerVersion: 15.3.1On this pagePuppeteer API | FAQ | Contributing | Troubleshooting​Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. Puppeteer runs headless by default, but can be configured to run full (non-headless) Chrome or Chromium.What can I do?​Most things that you can do manually in the browser can be done using Puppeteer! Here are a few examples to get you started:Generate screenshots and PDFs of pages.Crawl a SPA (Single-Page Application) and generate pre-rendered content (i.e. \\\"SSR\\\" (Server-Side Rendering)).Automate form submission, UI testing, keyboard input, etc.Create an up-to-date, automated testing environment. Run your tests directly in the latest version of Chrome using the latest JavaScript and browser features.Capture a timeline trace of your site to help diagnose performance issues.Test Chrome Extensions.Getting Started​Installation​To use Puppeteer in your project, run:npm i puppeteer# or \\\"yarn add puppeteer\\\"When you install Puppeteer, it downloads a recent version of Chromium (~170MB Mac, ~282MB Linux, ~280MB Win) that is guaranteed to work with the API (customizable through Environment Variables). For a version of Puppeteer purely for connection, see puppeteer-core.Environment Variables​Puppeteer looks for certain environment variables to aid its operations.\n                If Puppeteer doesn't find them in the environment during the installation step, a lowercased variant of these variables will be used from the npm config.HTTP_PROXY, HTTPS_PROXY, NO_PROXY - defines HTTP proxy settings that are used to download and run the browser.PUPPETEER_SKIP_CHROMIUM_DOWNLOAD - do not download bundled Chromium during installation step.PUPPETEER_TMP_DIR - defines the directory to be used by Puppeteer for creating temporary files. Defaults to os.tmpdir().PUPPETEER_DOWNLOAD_HOST - overwrite URL prefix that is used to download Chromium. Note: this includes protocol and might even include path prefix. Defaults to https://storage.googleapis.com.PUPPETEER_DOWNLOAD_PATH - overwrite the path for the downloads folder. Defaults to <root>/.local-chromium, where <root> is Puppeteer's package root.PUPPETEER_CHROMIUM_REVISION - specify a certain version of Chromium you'd like Puppeteer to use. See puppeteer.launch on how executable path is inferred.PUPPETEER_EXECUTABLE_PATH - specify an executable path to be used in puppeteer.launch.PUPPETEER_PRODUCT - specify which browser you'd like Puppeteer to use. Must be one of chrome or firefox. This can also be used during installation to fetch the recommended browser binary. Setting product programmatically in puppeteer.launch supersedes this environment variable. The product is exposed in puppeteer.productPUPPETEER_EXPERIMENTAL_CHROMIUM_MAC_ARM — specify Puppeteer download Chromium for Apple M1. On Apple M1 devices Puppeteer by default downloads the version for Intel's processor which runs via Rosetta. It works without any problems, however, with this option, you should get more efficient resource usage (CPU and RAM) that could lead to a faster execution time.dangerPuppeteer is only guaranteed to work with the bundled Chromium, use at your own risk.cautionPUPPETEER_* env variables are not accounted for in puppeteer-core.puppeteer-core​Every release since v1.7.0 we publish two packages:puppeteerpuppeteer-corepuppeteer is a product for browser automation. When installed, it downloads a version of\n                Chromium, which it then drives using puppeteer-core. Being an end-user product, puppeteer supports a bunch of convenient PUPPETEER_* env variables to tweak its behavior.puppeteer-core is a library to help drive anything that supports DevTools protocol. puppeteer-core doesn't download Chromium when installed. Being a library, puppeteer-core is fully driven\n                through its programmatic interface and disregards all the PUPPETEER_* env variables.To sum up, the only differences between puppeteer-core and puppeteer are:puppeteer-core doesn't automatically download Chromium when installed.puppeteer-core ignores all PUPPETEER_* env variables.In most cases, you'll be fine using the puppeteer package.However, you should use puppeteer-core if:you're building another end-user product or library atop of DevTools protocol. For example, one might build a PDF generator using puppeteer-core and write a custom install.js script that downloads headless_shell instead of Chromium to save disk space.you're bundling Puppeteer to use in Chrome Extension / browser with the DevTools protocol where downloading an additional Chromium binary is unnecessary.you're building a set of tools where puppeteer-core is one of the ingredients and you want to postpone install.js script execution until Chromium is about to be used.When using puppeteer-core, remember to change the include line:const puppeteer = require('puppeteer-core');You will then need to call puppeteer.connect or puppeteer.launch with an explicit executablePath or channel option.Usage​Puppeteer follows the latest maintenance LTS version of Node.Puppeteer will be familiar to people using other browser testing frameworks. You create an instance\n                of Browser, open pages, and then manipulate them with Puppeteer's API.Example - navigating to https://example.com and saving a screenshot as example.png:Save file as example.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  await page.screenshot({path: 'example.png'});  await browser.close();})();Execute script on the command linenode example.jsPuppeteer sets an initial page size to 800×600px, which defines the screenshot size. The page size can be customized with Page.setViewport().Example - create a PDF.Save file as hn.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://news.ycombinator.com', {    waitUntil: 'networkidle2',  });  await page.pdf({path: 'hn.pdf', format: 'a4'});  await browser.close();})();Execute script on the command linenode hn.jsSee Page.pdf for more information about creating pdfs.Example - evaluate script in the context of the pageSave file as get-dimensions.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  // Get the \\\"viewport\\\" of the page, as reported by the page.  const dimensions = await page.evaluate(() => {    return {      width: document.documentElement.clientWidth,      height: document.documentElement.clientHeight,      deviceScaleFactor: window.devicePixelRatio,    };  });  console.log('Dimensions:', dimensions);  await browser.close();})();Execute script on the command linenode get-dimensions.jsSee Page.evaluate and related methods like Page.evaluateOnNewDocument and Page.exposeFunction.Working with Chrome Extensions​Puppeteer can be used for testing Chrome Extensions.cautionExtensions in Chrome / Chromium currently only work in non-headless mode and experimental Chrome headless mode.The following is code for getting a handle to the background page of an extension whose source is located in ./my-extension:const puppeteer = require('puppeteer');(async () => {  const pathToExtension = require('path').join(__dirname, 'my-extension');  const browser = await puppeteer.launch({    headless: 'chrome',    args: [      `--disable-extensions-except=${pathToExtension}`,      `--load-extension=${pathToExtension}`,    ],  });  const backgroundPageTarget = await browser.waitForTarget(    target => target.type() === 'background_page'  );  const backgroundPage = await backgroundPageTarget.page();  // Test the background page as you would any other page.  await browser.close();})();noteChrome Manifest V3 extensions have a background ServiceWorker of type 'service_worker', instead of a page of type 'background_page'.noteIt is not yet possible to test extension popups or content scripts.Default runtime settings​1. Uses Headless modePuppeteer launches Chromium in headless mode. To launch a full version of Chromium, set the headless option when launching a browser:const browser = await puppeteer.launch({headless: false}); // default is true2. Runs a bundled version of ChromiumBy default, Puppeteer downloads and uses a specific version of Chromium so its API\n                is guaranteed to work out of the box. To use Puppeteer with a different version of Chrome or Chromium,\n                pass in the executable's path when creating a Browser instance:const browser = await puppeteer.launch({executablePath: '/path/to/Chrome'});You can also use Puppeteer with Firefox Nightly (experimental support). See Puppeteer.launch for more information.See this article for a description of the differences between Chromium and Chrome. This article describes some differences for Linux users.3. Creates a fresh user profilePuppeteer creates its own browser user profile which it cleans up on every run.Resources​API DocumentationExamplesCommunity list of Puppeteer resourcesDebugging tips​Turn off headless mode - sometimes it's useful to see what the browser is\n                displaying. Instead of launching in headless mode, launch a full version of\n                the browser using headless: false:const browser = await puppeteer.launch({headless: false});Slow it down - the slowMo option slows down Puppeteer operations by the\n                specified amount of milliseconds. It's another way to help see what's going on.const browser = await puppeteer.launch({  headless: false,  slowMo: 250, // slow down by 250ms});Capture console output - You can listen for the console event.\n                This is also handy when debugging code in page.evaluate():page.on('console', msg => console.log('PAGE LOG:', msg.text()));await page.evaluate(() => console.log(`url is ${location.href}`));Use debugger in application code browserThere are two execution context: node.js that is running test code, and the browser\n                running application code being tested. This lets you debug code in the\n                application code browser; ie code inside evaluate().Use {devtools: true} when launching Puppeteer:const browser = await puppeteer.launch({devtools: true});Change default test timeout:jest: jest.setTimeout(100000);jasmine: jasmine.DEFAULT_TIMEOUT_INTERVAL = 100000;mocha: this.timeout(100000); (don't forget to change test to use function and not '=>')Add an evaluate statement with debugger inside / add debugger to an existing evaluate statement:await page.evaluate(() => {  debugger;});The test will now stop executing in the above evaluate statement, and chromium will stop in debug mode.Use debugger in node.jsThis will let you debug test code. For example, you can step over await page.click() in the node.js script and see the click happen in the application code browser.Note that you won't be able to run await page.click() in\n                DevTools console due to this Chromium bug. So if\n                you want to try something out, you have to add it to your test file.Add debugger; to your test, eg:debugger;await page.click('a[target=_blank]');Set headless to falseRun node --inspect-brk, eg node --inspect-brk node_modules/.bin/jest testsIn Chrome open chrome://inspect/#devices and click inspectIn the newly opened test browser, type F8 to resume test executionNow your debugger will be hit and you can debug in the test browserEnable verbose logging - internal DevTools protocol traffic\n                will be logged via the debug module under the puppeteer namespace. # Basic verbose logging env DEBUG=\\\"puppeteer:*\\\" node script.js # Protocol traffic can be rather noisy. This example filters out all Network domain messages env DEBUG=\\\"puppeteer:*\\\" env DEBUG_COLORS=true node script.js 2>&1 | grep -v '\\\"Network'Debug your Puppeteer (node) code easily, using ndbnpm install -g ndb (or even better, use npx!)add a debugger to your Puppeteer (node) codeadd ndb (or npx ndb) before your test command. For example:ndb jest or ndb mocha (or npx ndb jest / npx ndb mocha)debug your test inside chromium like a boss!Contributing​Check out our contributing guide to get an overview of Puppeteer development.FAQ​Our FAQ has migrated to our site.NextFAQCommunityStack OverflowTwitterYouTubeCopyright © 2022 Google, Inc.···\n                \"","statusTrace":"Error: expect(received).toContain(expected) // indexOf\n                \n                Expected substring: \"Puppeter\"\n                Received string:    \"\n                !function(){function t(t){document.documentElement.setAttribute(\\\"data-theme\\\",t)}var e=function(){var t=null;try{t=localStorage.getItem(\\\"theme\\\")}catch(t){}return t}();t(null!==e?e:\\\"light\\\")}()Skip to main contentPuppeteer15.3.1Next15.3.115.3.0ctrlKPuppeteerVersionsNext15.3.115.3.0← Back to main menuPuppeteerFAQTroubleshootingContributingChromium SupportAPIPuppeteerVersion: 15.3.1On this pagePuppeteer API | FAQ | Contributing | Troubleshooting​Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. Puppeteer runs headless by default, but can be configured to run full (non-headless) Chrome or Chromium.What can I do?​Most things that you can do manually in the browser can be done using Puppeteer! Here are a few examples to get you started:Generate screenshots and PDFs of pages.Crawl a SPA (Single-Page Application) and generate pre-rendered content (i.e. \\\"SSR\\\" (Server-Side Rendering)).Automate form submission, UI testing, keyboard input, etc.Create an up-to-date, automated testing environment. Run your tests directly in the latest version of Chrome using the latest JavaScript and browser features.Capture a timeline trace of your site to help diagnose performance issues.Test Chrome Extensions.Getting Started​Installation​To use Puppeteer in your project, run:npm i puppeteer# or \\\"yarn add puppeteer\\\"When you install Puppeteer, it downloads a recent version of Chromium (~170MB Mac, ~282MB Linux, ~280MB Win) that is guaranteed to work with the API (customizable through Environment Variables). For a version of Puppeteer purely for connection, see puppeteer-core.Environment Variables​Puppeteer looks for certain environment variables to aid its operations.\n                If Puppeteer doesn't find them in the environment during the installation step, a lowercased variant of these variables will be used from the npm config.HTTP_PROXY, HTTPS_PROXY, NO_PROXY - defines HTTP proxy settings that are used to download and run the browser.PUPPETEER_SKIP_CHROMIUM_DOWNLOAD - do not download bundled Chromium during installation step.PUPPETEER_TMP_DIR - defines the directory to be used by Puppeteer for creating temporary files. Defaults to os.tmpdir().PUPPETEER_DOWNLOAD_HOST - overwrite URL prefix that is used to download Chromium. Note: this includes protocol and might even include path prefix. Defaults to https://storage.googleapis.com.PUPPETEER_DOWNLOAD_PATH - overwrite the path for the downloads folder. Defaults to <root>/.local-chromium, where <root> is Puppeteer's package root.PUPPETEER_CHROMIUM_REVISION - specify a certain version of Chromium you'd like Puppeteer to use. See puppeteer.launch on how executable path is inferred.PUPPETEER_EXECUTABLE_PATH - specify an executable path to be used in puppeteer.launch.PUPPETEER_PRODUCT - specify which browser you'd like Puppeteer to use. Must be one of chrome or firefox. This can also be used during installation to fetch the recommended browser binary. Setting product programmatically in puppeteer.launch supersedes this environment variable. The product is exposed in puppeteer.productPUPPETEER_EXPERIMENTAL_CHROMIUM_MAC_ARM — specify Puppeteer download Chromium for Apple M1. On Apple M1 devices Puppeteer by default downloads the version for Intel's processor which runs via Rosetta. It works without any problems, however, with this option, you should get more efficient resource usage (CPU and RAM) that could lead to a faster execution time.dangerPuppeteer is only guaranteed to work with the bundled Chromium, use at your own risk.cautionPUPPETEER_* env variables are not accounted for in puppeteer-core.puppeteer-core​Every release since v1.7.0 we publish two packages:puppeteerpuppeteer-corepuppeteer is a product for browser automation. When installed, it downloads a version of\n                Chromium, which it then drives using puppeteer-core. Being an end-user product, puppeteer supports a bunch of convenient PUPPETEER_* env variables to tweak its behavior.puppeteer-core is a library to help drive anything that supports DevTools protocol. puppeteer-core doesn't download Chromium when installed. Being a library, puppeteer-core is fully driven\n                through its programmatic interface and disregards all the PUPPETEER_* env variables.To sum up, the only differences between puppeteer-core and puppeteer are:puppeteer-core doesn't automatically download Chromium when installed.puppeteer-core ignores all PUPPETEER_* env variables.In most cases, you'll be fine using the puppeteer package.However, you should use puppeteer-core if:you're building another end-user product or library atop of DevTools protocol. For example, one might build a PDF generator using puppeteer-core and write a custom install.js script that downloads headless_shell instead of Chromium to save disk space.you're bundling Puppeteer to use in Chrome Extension / browser with the DevTools protocol where downloading an additional Chromium binary is unnecessary.you're building a set of tools where puppeteer-core is one of the ingredients and you want to postpone install.js script execution until Chromium is about to be used.When using puppeteer-core, remember to change the include line:const puppeteer = require('puppeteer-core');You will then need to call puppeteer.connect or puppeteer.launch with an explicit executablePath or channel option.Usage​Puppeteer follows the latest maintenance LTS version of Node.Puppeteer will be familiar to people using other browser testing frameworks. You create an instance\n                of Browser, open pages, and then manipulate them with Puppeteer's API.Example - navigating to https://example.com and saving a screenshot as example.png:Save file as example.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  await page.screenshot({path: 'example.png'});  await browser.close();})();Execute script on the command linenode example.jsPuppeteer sets an initial page size to 800×600px, which defines the screenshot size. The page size can be customized with Page.setViewport().Example - create a PDF.Save file as hn.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://news.ycombinator.com', {    waitUntil: 'networkidle2',  });  await page.pdf({path: 'hn.pdf', format: 'a4'});  await browser.close();})();Execute script on the command linenode hn.jsSee Page.pdf for more information about creating pdfs.Example - evaluate script in the context of the pageSave file as get-dimensions.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  // Get the \\\"viewport\\\" of the page, as reported by the page.  const dimensions = await page.evaluate(() => {    return {      width: document.documentElement.clientWidth,      height: document.documentElement.clientHeight,      deviceScaleFactor: window.devicePixelRatio,    };  });  console.log('Dimensions:', dimensions);  await browser.close();})();Execute script on the command linenode get-dimensions.jsSee Page.evaluate and related methods like Page.evaluateOnNewDocument and Page.exposeFunction.Working with Chrome Extensions​Puppeteer can be used for testing Chrome Extensions.cautionExtensions in Chrome / Chromium currently only work in non-headless mode and experimental Chrome headless mode.The following is code for getting a handle to the background page of an extension whose source is located in ./my-extension:const puppeteer = require('puppeteer');(async () => {  const pathToExtension = require('path').join(__dirname, 'my-extension');  const browser = await puppeteer.launch({    headless: 'chrome',    args: [      `--disable-extensions-except=${pathToExtension}`,      `--load-extension=${pathToExtension}`,    ],  });  const backgroundPageTarget = await browser.waitForTarget(    target => target.type() === 'background_page'  );  const backgroundPage = await backgroundPageTarget.page();  // Test the background page as you would any other page.  await browser.close();})();noteChrome Manifest V3 extensions have a background ServiceWorker of type 'service_worker', instead of a page of type 'background_page'.noteIt is not yet possible to test extension popups or content scripts.Default runtime settings​1. Uses Headless modePuppeteer launches Chromium in headless mode. To launch a full version of Chromium, set the headless option when launching a browser:const browser = await puppeteer.launch({headless: false}); // default is true2. Runs a bundled version of ChromiumBy default, Puppeteer downloads and uses a specific version of Chromium so its API\n                is guaranteed to work out of the box. To use Puppeteer with a different version of Chrome or Chromium,\n                pass in the executable's path when creating a Browser instance:const browser = await puppeteer.launch({executablePath: '/path/to/Chrome'});You can also use Puppeteer with Firefox Nightly (experimental support). See Puppeteer.launch for more information.See this article for a description of the differences between Chromium and Chrome. This article describes some differences for Linux users.3. Creates a fresh user profilePuppeteer creates its own browser user profile which it cleans up on every run.Resources​API DocumentationExamplesCommunity list of Puppeteer resourcesDebugging tips​Turn off headless mode - sometimes it's useful to see what the browser is\n                displaying. Instead of launching in headless mode, launch a full version of\n                the browser using headless: false:const browser = await puppeteer.launch({headless: false});Slow it down - the slowMo option slows down Puppeteer operations by the\n                specified amount of milliseconds. It's another way to help see what's going on.const browser = await puppeteer.launch({  headless: false,  slowMo: 250, // slow down by 250ms});Capture console output - You can listen for the console event.\n                This is also handy when debugging code in page.evaluate():page.on('console', msg => console.log('PAGE LOG:', msg.text()));await page.evaluate(() => console.log(`url is ${location.href}`));Use debugger in application code browserThere are two execution context: node.js that is running test code, and the browser\n                running application code being tested. This lets you debug code in the\n                application code browser; ie code inside evaluate().Use {devtools: true} when launching Puppeteer:const browser = await puppeteer.launch({devtools: true});Change default test timeout:jest: jest.setTimeout(100000);jasmine: jasmine.DEFAULT_TIMEOUT_INTERVAL = 100000;mocha: this.timeout(100000); (don't forget to change test to use function and not '=>')Add an evaluate statement with debugger inside / add debugger to an existing evaluate statement:await page.evaluate(() => {  debugger;});The test will now stop executing in the above evaluate statement, and chromium will stop in debug mode.Use debugger in node.jsThis will let you debug test code. For example, you can step over await page.click() in the node.js script and see the click happen in the application code browser.Note that you won't be able to run await page.click() in\n                DevTools console due to this Chromium bug. So if\n                you want to try something out, you have to add it to your test file.Add debugger; to your test, eg:debugger;await page.click('a[target=_blank]');Set headless to falseRun node --inspect-brk, eg node --inspect-brk node_modules/.bin/jest testsIn Chrome open chrome://inspect/#devices and click inspectIn the newly opened test browser, type F8 to resume test executionNow your debugger will be hit and you can debug in the test browserEnable verbose logging - internal DevTools protocol traffic\n                will be logged via the debug module under the puppeteer namespace. # Basic verbose logging env DEBUG=\\\"puppeteer:*\\\" node script.js # Protocol traffic can be rather noisy. This example filters out all Network domain messages env DEBUG=\\\"puppeteer:*\\\" env DEBUG_COLORS=true node script.js 2>&1 | grep -v '\\\"Network'Debug your Puppeteer (node) code easily, using ndbnpm install -g ndb (or even better, use npx!)add a debugger to your Puppeteer (node) codeadd ndb (or npx ndb) before your test command. For example:ndb jest or ndb mocha (or npx ndb jest / npx ndb mocha)debug your test inside chromium like a boss!Contributing​Check out our contributing guide to get an overview of Puppeteer development.FAQ​Our FAQ has migrated to our site.NextFAQCommunityStack OverflowTwitterYouTubeCopyright © 2022 Google, Inc.···\n                \"\n                    at VerifyTitle.<anonymous> (/home/runner/work/puppeteer-screenplay-jest-allure/puppeteer-screenplay-jest-allure/src/screenplay/question/VerifyTitle.ts:16:18)\n                    at Generator.next (<anonymous>)\n                    at fulfilled (/home/runner/work/puppeteer-screenplay-jest-allure/puppeteer-screenplay-jest-allure/src/screenplay/question/VerifyTitle.ts:5:58)\n                    at processTicksAndRejections (node:internal/process/task_queues:96:5)","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"Error: expect(received).toContain(expected) // indexOf\n                \n                Expected substring: \"Puppeter\"\n                Received string:    \"\n                !function(){function t(t){document.documentElement.setAttribute(\\\"data-theme\\\",t)}var e=function(){var t=null;try{t=localStorage.getItem(\\\"theme\\\")}catch(t){}return t}();t(null!==e?e:\\\"light\\\")}()Skip to main contentPuppeteer15.3.1Next15.3.115.3.0ctrlKPuppeteerVersionsNext15.3.115.3.0← Back to main menuPuppeteerFAQTroubleshootingContributingChromium SupportAPIPuppeteerVersion: 15.3.1On this pagePuppeteer API | FAQ | Contributing | Troubleshooting​Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. Puppeteer runs headless by default, but can be configured to run full (non-headless) Chrome or Chromium.What can I do?​Most things that you can do manually in the browser can be done using Puppeteer! Here are a few examples to get you started:Generate screenshots and PDFs of pages.Crawl a SPA (Single-Page Application) and generate pre-rendered content (i.e. \\\"SSR\\\" (Server-Side Rendering)).Automate form submission, UI testing, keyboard input, etc.Create an up-to-date, automated testing environment. Run your tests directly in the latest version of Chrome using the latest JavaScript and browser features.Capture a timeline trace of your site to help diagnose performance issues.Test Chrome Extensions.Getting Started​Installation​To use Puppeteer in your project, run:npm i puppeteer# or \\\"yarn add puppeteer\\\"When you install Puppeteer, it downloads a recent version of Chromium (~170MB Mac, ~282MB Linux, ~280MB Win) that is guaranteed to work with the API (customizable through Environment Variables). For a version of Puppeteer purely for connection, see puppeteer-core.Environment Variables​Puppeteer looks for certain environment variables to aid its operations.\n                If Puppeteer doesn't find them in the environment during the installation step, a lowercased variant of these variables will be used from the npm config.HTTP_PROXY, HTTPS_PROXY, NO_PROXY - defines HTTP proxy settings that are used to download and run the browser.PUPPETEER_SKIP_CHROMIUM_DOWNLOAD - do not download bundled Chromium during installation step.PUPPETEER_TMP_DIR - defines the directory to be used by Puppeteer for creating temporary files. Defaults to os.tmpdir().PUPPETEER_DOWNLOAD_HOST - overwrite URL prefix that is used to download Chromium. Note: this includes protocol and might even include path prefix. Defaults to https://storage.googleapis.com.PUPPETEER_DOWNLOAD_PATH - overwrite the path for the downloads folder. Defaults to <root>/.local-chromium, where <root> is Puppeteer's package root.PUPPETEER_CHROMIUM_REVISION - specify a certain version of Chromium you'd like Puppeteer to use. See puppeteer.launch on how executable path is inferred.PUPPETEER_EXECUTABLE_PATH - specify an executable path to be used in puppeteer.launch.PUPPETEER_PRODUCT - specify which browser you'd like Puppeteer to use. Must be one of chrome or firefox. This can also be used during installation to fetch the recommended browser binary. Setting product programmatically in puppeteer.launch supersedes this environment variable. The product is exposed in puppeteer.productPUPPETEER_EXPERIMENTAL_CHROMIUM_MAC_ARM — specify Puppeteer download Chromium for Apple M1. On Apple M1 devices Puppeteer by default downloads the version for Intel's processor which runs via Rosetta. It works without any problems, however, with this option, you should get more efficient resource usage (CPU and RAM) that could lead to a faster execution time.dangerPuppeteer is only guaranteed to work with the bundled Chromium, use at your own risk.cautionPUPPETEER_* env variables are not accounted for in puppeteer-core.puppeteer-core​Every release since v1.7.0 we publish two packages:puppeteerpuppeteer-corepuppeteer is a product for browser automation. When installed, it downloads a version of\n                Chromium, which it then drives using puppeteer-core. Being an end-user product, puppeteer supports a bunch of convenient PUPPETEER_* env variables to tweak its behavior.puppeteer-core is a library to help drive anything that supports DevTools protocol. puppeteer-core doesn't download Chromium when installed. Being a library, puppeteer-core is fully driven\n                through its programmatic interface and disregards all the PUPPETEER_* env variables.To sum up, the only differences between puppeteer-core and puppeteer are:puppeteer-core doesn't automatically download Chromium when installed.puppeteer-core ignores all PUPPETEER_* env variables.In most cases, you'll be fine using the puppeteer package.However, you should use puppeteer-core if:you're building another end-user product or library atop of DevTools protocol. For example, one might build a PDF generator using puppeteer-core and write a custom install.js script that downloads headless_shell instead of Chromium to save disk space.you're bundling Puppeteer to use in Chrome Extension / browser with the DevTools protocol where downloading an additional Chromium binary is unnecessary.you're building a set of tools where puppeteer-core is one of the ingredients and you want to postpone install.js script execution until Chromium is about to be used.When using puppeteer-core, remember to change the include line:const puppeteer = require('puppeteer-core');You will then need to call puppeteer.connect or puppeteer.launch with an explicit executablePath or channel option.Usage​Puppeteer follows the latest maintenance LTS version of Node.Puppeteer will be familiar to people using other browser testing frameworks. You create an instance\n                of Browser, open pages, and then manipulate them with Puppeteer's API.Example - navigating to https://example.com and saving a screenshot as example.png:Save file as example.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  await page.screenshot({path: 'example.png'});  await browser.close();})();Execute script on the command linenode example.jsPuppeteer sets an initial page size to 800×600px, which defines the screenshot size. The page size can be customized with Page.setViewport().Example - create a PDF.Save file as hn.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://news.ycombinator.com', {    waitUntil: 'networkidle2',  });  await page.pdf({path: 'hn.pdf', format: 'a4'});  await browser.close();})();Execute script on the command linenode hn.jsSee Page.pdf for more information about creating pdfs.Example - evaluate script in the context of the pageSave file as get-dimensions.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  // Get the \\\"viewport\\\" of the page, as reported by the page.  const dimensions = await page.evaluate(() => {    return {      width: document.documentElement.clientWidth,      height: document.documentElement.clientHeight,      deviceScaleFactor: window.devicePixelRatio,    };  });  console.log('Dimensions:', dimensions);  await browser.close();})();Execute script on the command linenode get-dimensions.jsSee Page.evaluate and related methods like Page.evaluateOnNewDocument and Page.exposeFunction.Working with Chrome Extensions​Puppeteer can be used for testing Chrome Extensions.cautionExtensions in Chrome / Chromium currently only work in non-headless mode and experimental Chrome headless mode.The following is code for getting a handle to the background page of an extension whose source is located in ./my-extension:const puppeteer = require('puppeteer');(async () => {  const pathToExtension = require('path').join(__dirname, 'my-extension');  const browser = await puppeteer.launch({    headless: 'chrome',    args: [      `--disable-extensions-except=${pathToExtension}`,      `--load-extension=${pathToExtension}`,    ],  });  const backgroundPageTarget = await browser.waitForTarget(    target => target.type() === 'background_page'  );  const backgroundPage = await backgroundPageTarget.page();  // Test the background page as you would any other page.  await browser.close();})();noteChrome Manifest V3 extensions have a background ServiceWorker of type 'service_worker', instead of a page of type 'background_page'.noteIt is not yet possible to test extension popups or content scripts.Default runtime settings​1. Uses Headless modePuppeteer launches Chromium in headless mode. To launch a full version of Chromium, set the headless option when launching a browser:const browser = await puppeteer.launch({headless: false}); // default is true2. Runs a bundled version of ChromiumBy default, Puppeteer downloads and uses a specific version of Chromium so its API\n                is guaranteed to work out of the box. To use Puppeteer with a different version of Chrome or Chromium,\n                pass in the executable's path when creating a Browser instance:const browser = await puppeteer.launch({executablePath: '/path/to/Chrome'});You can also use Puppeteer with Firefox Nightly (experimental support). See Puppeteer.launch for more information.See this article for a description of the differences between Chromium and Chrome. This article describes some differences for Linux users.3. Creates a fresh user profilePuppeteer creates its own browser user profile which it cleans up on every run.Resources​API DocumentationExamplesCommunity list of Puppeteer resourcesDebugging tips​Turn off headless mode - sometimes it's useful to see what the browser is\n                displaying. Instead of launching in headless mode, launch a full version of\n                the browser using headless: false:const browser = await puppeteer.launch({headless: false});Slow it down - the slowMo option slows down Puppeteer operations by the\n                specified amount of milliseconds. It's another way to help see what's going on.const browser = await puppeteer.launch({  headless: false,  slowMo: 250, // slow down by 250ms});Capture console output - You can listen for the console event.\n                This is also handy when debugging code in page.evaluate():page.on('console', msg => console.log('PAGE LOG:', msg.text()));await page.evaluate(() => console.log(`url is ${location.href}`));Use debugger in application code browserThere are two execution context: node.js that is running test code, and the browser\n                running application code being tested. This lets you debug code in the\n                application code browser; ie code inside evaluate().Use {devtools: true} when launching Puppeteer:const browser = await puppeteer.launch({devtools: true});Change default test timeout:jest: jest.setTimeout(100000);jasmine: jasmine.DEFAULT_TIMEOUT_INTERVAL = 100000;mocha: this.timeout(100000); (don't forget to change test to use function and not '=>')Add an evaluate statement with debugger inside / add debugger to an existing evaluate statement:await page.evaluate(() => {  debugger;});The test will now stop executing in the above evaluate statement, and chromium will stop in debug mode.Use debugger in node.jsThis will let you debug test code. For example, you can step over await page.click() in the node.js script and see the click happen in the application code browser.Note that you won't be able to run await page.click() in\n                DevTools console due to this Chromium bug. So if\n                you want to try something out, you have to add it to your test file.Add debugger; to your test, eg:debugger;await page.click('a[target=_blank]');Set headless to falseRun node --inspect-brk, eg node --inspect-brk node_modules/.bin/jest testsIn Chrome open chrome://inspect/#devices and click inspectIn the newly opened test browser, type F8 to resume test executionNow your debugger will be hit and you can debug in the test browserEnable verbose logging - internal DevTools protocol traffic\n                will be logged via the debug module under the puppeteer namespace. # Basic verbose logging env DEBUG=\\\"puppeteer:*\\\" node script.js # Protocol traffic can be rather noisy. This example filters out all Network domain messages env DEBUG=\\\"puppeteer:*\\\" env DEBUG_COLORS=true node script.js 2>&1 | grep -v '\\\"Network'Debug your Puppeteer (node) code easily, using ndbnpm install -g ndb (or even better, use npx!)add a debugger to your Puppeteer (node) codeadd ndb (or npx ndb) before your test command. For example:ndb jest or ndb mocha (or npx ndb jest / npx ndb mocha)debug your test inside chromium like a boss!Contributing​Check out our contributing guide to get an overview of Puppeteer development.FAQ​Our FAQ has migrated to our site.NextFAQCommunityStack OverflowTwitterYouTubeCopyright © 2022 Google, Inc.···\n                \"","statusTrace":"Error: expect(received).toContain(expected) // indexOf\n                \n                Expected substring: \"Puppeter\"\n                Received string:    \"\n                !function(){function t(t){document.documentElement.setAttribute(\\\"data-theme\\\",t)}var e=function(){var t=null;try{t=localStorage.getItem(\\\"theme\\\")}catch(t){}return t}();t(null!==e?e:\\\"light\\\")}()Skip to main contentPuppeteer15.3.1Next15.3.115.3.0ctrlKPuppeteerVersionsNext15.3.115.3.0← Back to main menuPuppeteerFAQTroubleshootingContributingChromium SupportAPIPuppeteerVersion: 15.3.1On this pagePuppeteer API | FAQ | Contributing | Troubleshooting​Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. Puppeteer runs headless by default, but can be configured to run full (non-headless) Chrome or Chromium.What can I do?​Most things that you can do manually in the browser can be done using Puppeteer! Here are a few examples to get you started:Generate screenshots and PDFs of pages.Crawl a SPA (Single-Page Application) and generate pre-rendered content (i.e. \\\"SSR\\\" (Server-Side Rendering)).Automate form submission, UI testing, keyboard input, etc.Create an up-to-date, automated testing environment. Run your tests directly in the latest version of Chrome using the latest JavaScript and browser features.Capture a timeline trace of your site to help diagnose performance issues.Test Chrome Extensions.Getting Started​Installation​To use Puppeteer in your project, run:npm i puppeteer# or \\\"yarn add puppeteer\\\"When you install Puppeteer, it downloads a recent version of Chromium (~170MB Mac, ~282MB Linux, ~280MB Win) that is guaranteed to work with the API (customizable through Environment Variables). For a version of Puppeteer purely for connection, see puppeteer-core.Environment Variables​Puppeteer looks for certain environment variables to aid its operations.\n                If Puppeteer doesn't find them in the environment during the installation step, a lowercased variant of these variables will be used from the npm config.HTTP_PROXY, HTTPS_PROXY, NO_PROXY - defines HTTP proxy settings that are used to download and run the browser.PUPPETEER_SKIP_CHROMIUM_DOWNLOAD - do not download bundled Chromium during installation step.PUPPETEER_TMP_DIR - defines the directory to be used by Puppeteer for creating temporary files. Defaults to os.tmpdir().PUPPETEER_DOWNLOAD_HOST - overwrite URL prefix that is used to download Chromium. Note: this includes protocol and might even include path prefix. Defaults to https://storage.googleapis.com.PUPPETEER_DOWNLOAD_PATH - overwrite the path for the downloads folder. Defaults to <root>/.local-chromium, where <root> is Puppeteer's package root.PUPPETEER_CHROMIUM_REVISION - specify a certain version of Chromium you'd like Puppeteer to use. See puppeteer.launch on how executable path is inferred.PUPPETEER_EXECUTABLE_PATH - specify an executable path to be used in puppeteer.launch.PUPPETEER_PRODUCT - specify which browser you'd like Puppeteer to use. Must be one of chrome or firefox. This can also be used during installation to fetch the recommended browser binary. Setting product programmatically in puppeteer.launch supersedes this environment variable. The product is exposed in puppeteer.productPUPPETEER_EXPERIMENTAL_CHROMIUM_MAC_ARM — specify Puppeteer download Chromium for Apple M1. On Apple M1 devices Puppeteer by default downloads the version for Intel's processor which runs via Rosetta. It works without any problems, however, with this option, you should get more efficient resource usage (CPU and RAM) that could lead to a faster execution time.dangerPuppeteer is only guaranteed to work with the bundled Chromium, use at your own risk.cautionPUPPETEER_* env variables are not accounted for in puppeteer-core.puppeteer-core​Every release since v1.7.0 we publish two packages:puppeteerpuppeteer-corepuppeteer is a product for browser automation. When installed, it downloads a version of\n                Chromium, which it then drives using puppeteer-core. Being an end-user product, puppeteer supports a bunch of convenient PUPPETEER_* env variables to tweak its behavior.puppeteer-core is a library to help drive anything that supports DevTools protocol. puppeteer-core doesn't download Chromium when installed. Being a library, puppeteer-core is fully driven\n                through its programmatic interface and disregards all the PUPPETEER_* env variables.To sum up, the only differences between puppeteer-core and puppeteer are:puppeteer-core doesn't automatically download Chromium when installed.puppeteer-core ignores all PUPPETEER_* env variables.In most cases, you'll be fine using the puppeteer package.However, you should use puppeteer-core if:you're building another end-user product or library atop of DevTools protocol. For example, one might build a PDF generator using puppeteer-core and write a custom install.js script that downloads headless_shell instead of Chromium to save disk space.you're bundling Puppeteer to use in Chrome Extension / browser with the DevTools protocol where downloading an additional Chromium binary is unnecessary.you're building a set of tools where puppeteer-core is one of the ingredients and you want to postpone install.js script execution until Chromium is about to be used.When using puppeteer-core, remember to change the include line:const puppeteer = require('puppeteer-core');You will then need to call puppeteer.connect or puppeteer.launch with an explicit executablePath or channel option.Usage​Puppeteer follows the latest maintenance LTS version of Node.Puppeteer will be familiar to people using other browser testing frameworks. You create an instance\n                of Browser, open pages, and then manipulate them with Puppeteer's API.Example - navigating to https://example.com and saving a screenshot as example.png:Save file as example.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  await page.screenshot({path: 'example.png'});  await browser.close();})();Execute script on the command linenode example.jsPuppeteer sets an initial page size to 800×600px, which defines the screenshot size. The page size can be customized with Page.setViewport().Example - create a PDF.Save file as hn.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://news.ycombinator.com', {    waitUntil: 'networkidle2',  });  await page.pdf({path: 'hn.pdf', format: 'a4'});  await browser.close();})();Execute script on the command linenode hn.jsSee Page.pdf for more information about creating pdfs.Example - evaluate script in the context of the pageSave file as get-dimensions.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  // Get the \\\"viewport\\\" of the page, as reported by the page.  const dimensions = await page.evaluate(() => {    return {      width: document.documentElement.clientWidth,      height: document.documentElement.clientHeight,      deviceScaleFactor: window.devicePixelRatio,    };  });  console.log('Dimensions:', dimensions);  await browser.close();})();Execute script on the command linenode get-dimensions.jsSee Page.evaluate and related methods like Page.evaluateOnNewDocument and Page.exposeFunction.Working with Chrome Extensions​Puppeteer can be used for testing Chrome Extensions.cautionExtensions in Chrome / Chromium currently only work in non-headless mode and experimental Chrome headless mode.The following is code for getting a handle to the background page of an extension whose source is located in ./my-extension:const puppeteer = require('puppeteer');(async () => {  const pathToExtension = require('path').join(__dirname, 'my-extension');  const browser = await puppeteer.launch({    headless: 'chrome',    args: [      `--disable-extensions-except=${pathToExtension}`,      `--load-extension=${pathToExtension}`,    ],  });  const backgroundPageTarget = await browser.waitForTarget(    target => target.type() === 'background_page'  );  const backgroundPage = await backgroundPageTarget.page();  // Test the background page as you would any other page.  await browser.close();})();noteChrome Manifest V3 extensions have a background ServiceWorker of type 'service_worker', instead of a page of type 'background_page'.noteIt is not yet possible to test extension popups or content scripts.Default runtime settings​1. Uses Headless modePuppeteer launches Chromium in headless mode. To launch a full version of Chromium, set the headless option when launching a browser:const browser = await puppeteer.launch({headless: false}); // default is true2. Runs a bundled version of ChromiumBy default, Puppeteer downloads and uses a specific version of Chromium so its API\n                is guaranteed to work out of the box. To use Puppeteer with a different version of Chrome or Chromium,\n                pass in the executable's path when creating a Browser instance:const browser = await puppeteer.launch({executablePath: '/path/to/Chrome'});You can also use Puppeteer with Firefox Nightly (experimental support). See Puppeteer.launch for more information.See this article for a description of the differences between Chromium and Chrome. This article describes some differences for Linux users.3. Creates a fresh user profilePuppeteer creates its own browser user profile which it cleans up on every run.Resources​API DocumentationExamplesCommunity list of Puppeteer resourcesDebugging tips​Turn off headless mode - sometimes it's useful to see what the browser is\n                displaying. Instead of launching in headless mode, launch a full version of\n                the browser using headless: false:const browser = await puppeteer.launch({headless: false});Slow it down - the slowMo option slows down Puppeteer operations by the\n                specified amount of milliseconds. It's another way to help see what's going on.const browser = await puppeteer.launch({  headless: false,  slowMo: 250, // slow down by 250ms});Capture console output - You can listen for the console event.\n                This is also handy when debugging code in page.evaluate():page.on('console', msg => console.log('PAGE LOG:', msg.text()));await page.evaluate(() => console.log(`url is ${location.href}`));Use debugger in application code browserThere are two execution context: node.js that is running test code, and the browser\n                running application code being tested. This lets you debug code in the\n                application code browser; ie code inside evaluate().Use {devtools: true} when launching Puppeteer:const browser = await puppeteer.launch({devtools: true});Change default test timeout:jest: jest.setTimeout(100000);jasmine: jasmine.DEFAULT_TIMEOUT_INTERVAL = 100000;mocha: this.timeout(100000); (don't forget to change test to use function and not '=>')Add an evaluate statement with debugger inside / add debugger to an existing evaluate statement:await page.evaluate(() => {  debugger;});The test will now stop executing in the above evaluate statement, and chromium will stop in debug mode.Use debugger in node.jsThis will let you debug test code. For example, you can step over await page.click() in the node.js script and see the click happen in the application code browser.Note that you won't be able to run await page.click() in\n                DevTools console due to this Chromium bug. So if\n                you want to try something out, you have to add it to your test file.Add debugger; to your test, eg:debugger;await page.click('a[target=_blank]');Set headless to falseRun node --inspect-brk, eg node --inspect-brk node_modules/.bin/jest testsIn Chrome open chrome://inspect/#devices and click inspectIn the newly opened test browser, type F8 to resume test executionNow your debugger will be hit and you can debug in the test browserEnable verbose logging - internal DevTools protocol traffic\n                will be logged via the debug module under the puppeteer namespace. # Basic verbose logging env DEBUG=\\\"puppeteer:*\\\" node script.js # Protocol traffic can be rather noisy. This example filters out all Network domain messages env DEBUG=\\\"puppeteer:*\\\" env DEBUG_COLORS=true node script.js 2>&1 | grep -v '\\\"Network'Debug your Puppeteer (node) code easily, using ndbnpm install -g ndb (or even better, use npx!)add a debugger to your Puppeteer (node) codeadd ndb (or npx ndb) before your test command. For example:ndb jest or ndb mocha (or npx ndb jest / npx ndb mocha)debug your test inside chromium like a boss!Contributing​Check out our contributing guide to get an overview of Puppeteer development.FAQ​Our FAQ has migrated to our site.NextFAQCommunityStack OverflowTwitterYouTubeCopyright © 2022 Google, Inc.···\n                \"\n                    at VerifyTitle.<anonymous> (/home/runner/work/puppeteer-screenplay-jest-allure/puppeteer-screenplay-jest-allure/src/screenplay/question/VerifyTitle.ts:16:18)\n                    at Generator.next (<anonymous>)\n                    at fulfilled (/home/runner/work/puppeteer-screenplay-jest-allure/puppeteer-screenplay-jest-allure/src/screenplay/question/VerifyTitle.ts:5:58)\n                    at processTicksAndRejections (node:internal/process/task_queues:96:5)","steps":[{"name":"When Carlos wants to open the browser in Puppeter","time":{"start":1657158186487,"stop":1657158187300,"duration":813},"status":"passed","steps":[{"name":"Carlos open the browser on the following page https://pptr.dev","time":{"start":1657158187160,"stop":1657158187300,"duration":140},"status":"passed","steps":[],"attachments":[{"uid":"2df0d3a51dee60d2","name":"Screenshot","source":"2df0d3a51dee60d2.png","type":"image/png","size":79402}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Then he should note Puppeter in the title of the page","time":{"start":1657158187300,"stop":0,"duration":-1657158187300},"status":"unknown","steps":[{"name":"Carlos verify that the title is correct","time":{"start":1657158187300,"stop":0,"duration":-1657158187300},"status":"unknown","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":4,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"suite","value":"Open Page of differents webSite"},{"name":"testClass","value":"Open Page of differents webSite"},{"name":"testMethod","value":"should display Puppeter text on page title"},{"name":"package","value":"Open Page of differents webSite"},{"name":"resultFormat","value":"allure1"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":66,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":66},"items":[{"uid":"d03c8810fb87665","reportUrl":"https://camillomurcia.github.io/puppeteer-screenplay-jest-allure/84//#testresult/d03c8810fb87665","status":"failed","statusDetails":"Error: expect(received).toContain(expected) // indexOf\n                \n                Expected substring: \"Puppeter\"\n                Received string:    \"\n                !function(){function t(t){document.documentElement.setAttribute(\\\"data-theme\\\",t)}var e=function(){var t=null;try{t=localStorage.getItem(\\\"theme\\\")}catch(t){}return t}();t(null!==e?e:\\\"light\\\")}()Skip to main contentPuppeteer15.3.1Next15.3.115.3.0ctrlKPuppeteerVersionsNext15.3.115.3.0← Back to main menuPuppeteerFAQTroubleshootingContributingChromium SupportAPIPuppeteerVersion: 15.3.1On this pagePuppeteer API | FAQ | Contributing | Troubleshooting​Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. Puppeteer runs headless by default, but can be configured to run full (non-headless) Chrome or Chromium.What can I do?​Most things that you can do manually in the browser can be done using Puppeteer! Here are a few examples to get you started:Generate screenshots and PDFs of pages.Crawl a SPA (Single-Page Application) and generate pre-rendered content (i.e. \\\"SSR\\\" (Server-Side Rendering)).Automate form submission, UI testing, keyboard input, etc.Create an up-to-date, automated testing environment. Run your tests directly in the latest version of Chrome using the latest JavaScript and browser features.Capture a timeline trace of your site to help diagnose performance issues.Test Chrome Extensions.Getting Started​Installation​To use Puppeteer in your project, run:npm i puppeteer# or \\\"yarn add puppeteer\\\"When you install Puppeteer, it downloads a recent version of Chromium (~170MB Mac, ~282MB Linux, ~280MB Win) that is guaranteed to work with the API (customizable through Environment Variables). For a version of Puppeteer purely for connection, see puppeteer-core.Environment Variables​Puppeteer looks for certain environment variables to aid its operations.\n                If Puppeteer doesn't find them in the environment during the installation step, a lowercased variant of these variables will be used from the npm config.HTTP_PROXY, HTTPS_PROXY, NO_PROXY - defines HTTP proxy settings that are used to download and run the browser.PUPPETEER_SKIP_CHROMIUM_DOWNLOAD - do not download bundled Chromium during installation step.PUPPETEER_TMP_DIR - defines the directory to be used by Puppeteer for creating temporary files. Defaults to os.tmpdir().PUPPETEER_DOWNLOAD_HOST - overwrite URL prefix that is used to download Chromium. Note: this includes protocol and might even include path prefix. Defaults to https://storage.googleapis.com.PUPPETEER_DOWNLOAD_PATH - overwrite the path for the downloads folder. Defaults to <root>/.local-chromium, where <root> is Puppeteer's package root.PUPPETEER_CHROMIUM_REVISION - specify a certain version of Chromium you'd like Puppeteer to use. See puppeteer.launch on how executable path is inferred.PUPPETEER_EXECUTABLE_PATH - specify an executable path to be used in puppeteer.launch.PUPPETEER_PRODUCT - specify which browser you'd like Puppeteer to use. Must be one of chrome or firefox. This can also be used during installation to fetch the recommended browser binary. Setting product programmatically in puppeteer.launch supersedes this environment variable. The product is exposed in puppeteer.productPUPPETEER_EXPERIMENTAL_CHROMIUM_MAC_ARM — specify Puppeteer download Chromium for Apple M1. On Apple M1 devices Puppeteer by default downloads the version for Intel's processor which runs via Rosetta. It works without any problems, however, with this option, you should get more efficient resource usage (CPU and RAM) that could lead to a faster execution time.dangerPuppeteer is only guaranteed to work with the bundled Chromium, use at your own risk.cautionPUPPETEER_* env variables are not accounted for in puppeteer-core.puppeteer-core​Every release since v1.7.0 we publish two packages:puppeteerpuppeteer-corepuppeteer is a product for browser automation. When installed, it downloads a version of\n                Chromium, which it then drives using puppeteer-core. Being an end-user product, puppeteer supports a bunch of convenient PUPPETEER_* env variables to tweak its behavior.puppeteer-core is a library to help drive anything that supports DevTools protocol. puppeteer-core doesn't download Chromium when installed. Being a library, puppeteer-core is fully driven\n                through its programmatic interface and disregards all the PUPPETEER_* env variables.To sum up, the only differences between puppeteer-core and puppeteer are:puppeteer-core doesn't automatically download Chromium when installed.puppeteer-core ignores all PUPPETEER_* env variables.In most cases, you'll be fine using the puppeteer package.However, you should use puppeteer-core if:you're building another end-user product or library atop of DevTools protocol. For example, one might build a PDF generator using puppeteer-core and write a custom install.js script that downloads headless_shell instead of Chromium to save disk space.you're bundling Puppeteer to use in Chrome Extension / browser with the DevTools protocol where downloading an additional Chromium binary is unnecessary.you're building a set of tools where puppeteer-core is one of the ingredients and you want to postpone install.js script execution until Chromium is about to be used.When using puppeteer-core, remember to change the include line:const puppeteer = require('puppeteer-core');You will then need to call puppeteer.connect or puppeteer.launch with an explicit executablePath or channel option.Usage​Puppeteer follows the latest maintenance LTS version of Node.Puppeteer will be familiar to people using other browser testing frameworks. You create an instance\n                of Browser, open pages, and then manipulate them with Puppeteer's API.Example - navigating to https://example.com and saving a screenshot as example.png:Save file as example.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  await page.screenshot({path: 'example.png'});  await browser.close();})();Execute script on the command linenode example.jsPuppeteer sets an initial page size to 800×600px, which defines the screenshot size. The page size can be customized with Page.setViewport().Example - create a PDF.Save file as hn.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://news.ycombinator.com', {    waitUntil: 'networkidle2',  });  await page.pdf({path: 'hn.pdf', format: 'a4'});  await browser.close();})();Execute script on the command linenode hn.jsSee Page.pdf for more information about creating pdfs.Example - evaluate script in the context of the pageSave file as get-dimensions.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  // Get the \\\"viewport\\\" of the page, as reported by the page.  const dimensions = await page.evaluate(() => {    return {      width: document.documentElement.clientWidth,      height: document.documentElement.clientHeight,      deviceScaleFactor: window.devicePixelRatio,    };  });  console.log('Dimensions:', dimensions);  await browser.close();})();Execute script on the command linenode get-dimensions.jsSee Page.evaluate and related methods like Page.evaluateOnNewDocument and Page.exposeFunction.Working with Chrome Extensions​Puppeteer can be used for testing Chrome Extensions.cautionExtensions in Chrome / Chromium currently only work in non-headless mode and experimental Chrome headless mode.The following is code for getting a handle to the background page of an extension whose source is located in ./my-extension:const puppeteer = require('puppeteer');(async () => {  const pathToExtension = require('path').join(__dirname, 'my-extension');  const browser = await puppeteer.launch({    headless: 'chrome',    args: [      `--disable-extensions-except=${pathToExtension}`,      `--load-extension=${pathToExtension}`,    ],  });  const backgroundPageTarget = await browser.waitForTarget(    target => target.type() === 'background_page'  );  const backgroundPage = await backgroundPageTarget.page();  // Test the background page as you would any other page.  await browser.close();})();noteChrome Manifest V3 extensions have a background ServiceWorker of type 'service_worker', instead of a page of type 'background_page'.noteIt is not yet possible to test extension popups or content scripts.Default runtime settings​1. Uses Headless modePuppeteer launches Chromium in headless mode. To launch a full version of Chromium, set the headless option when launching a browser:const browser = await puppeteer.launch({headless: false}); // default is true2. Runs a bundled version of ChromiumBy default, Puppeteer downloads and uses a specific version of Chromium so its API\n                is guaranteed to work out of the box. To use Puppeteer with a different version of Chrome or Chromium,\n                pass in the executable's path when creating a Browser instance:const browser = await puppeteer.launch({executablePath: '/path/to/Chrome'});You can also use Puppeteer with Firefox Nightly (experimental support). See Puppeteer.launch for more information.See this article for a description of the differences between Chromium and Chrome. This article describes some differences for Linux users.3. Creates a fresh user profilePuppeteer creates its own browser user profile which it cleans up on every run.Resources​API DocumentationExamplesCommunity list of Puppeteer resourcesDebugging tips​Turn off headless mode - sometimes it's useful to see what the browser is\n                displaying. Instead of launching in headless mode, launch a full version of\n                the browser using headless: false:const browser = await puppeteer.launch({headless: false});Slow it down - the slowMo option slows down Puppeteer operations by the\n                specified amount of milliseconds. It's another way to help see what's going on.const browser = await puppeteer.launch({  headless: false,  slowMo: 250, // slow down by 250ms});Capture console output - You can listen for the console event.\n                This is also handy when debugging code in page.evaluate():page.on('console', msg => console.log('PAGE LOG:', msg.text()));await page.evaluate(() => console.log(`url is ${location.href}`));Use debugger in application code browserThere are two execution context: node.js that is running test code, and the browser\n                running application code being tested. This lets you debug code in the\n                application code browser; ie code inside evaluate().Use {devtools: true} when launching Puppeteer:const browser = await puppeteer.launch({devtools: true});Change default test timeout:jest: jest.setTimeout(100000);jasmine: jasmine.DEFAULT_TIMEOUT_INTERVAL = 100000;mocha: this.timeout(100000); (don't forget to change test to use function and not '=>')Add an evaluate statement with debugger inside / add debugger to an existing evaluate statement:await page.evaluate(() => {  debugger;});The test will now stop executing in the above evaluate statement, and chromium will stop in debug mode.Use debugger in node.jsThis will let you debug test code. For example, you can step over await page.click() in the node.js script and see the click happen in the application code browser.Note that you won't be able to run await page.click() in\n                DevTools console due to this Chromium bug. So if\n                you want to try something out, you have to add it to your test file.Add debugger; to your test, eg:debugger;await page.click('a[target=_blank]');Set headless to falseRun node --inspect-brk, eg node --inspect-brk node_modules/.bin/jest testsIn Chrome open chrome://inspect/#devices and click inspectIn the newly opened test browser, type F8 to resume test executionNow your debugger will be hit and you can debug in the test browserEnable verbose logging - internal DevTools protocol traffic\n                will be logged via the debug module under the puppeteer namespace. # Basic verbose logging env DEBUG=\\\"puppeteer:*\\\" node script.js # Protocol traffic can be rather noisy. This example filters out all Network domain messages env DEBUG=\\\"puppeteer:*\\\" env DEBUG_COLORS=true node script.js 2>&1 | grep -v '\\\"Network'Debug your Puppeteer (node) code easily, using ndbnpm install -g ndb (or even better, use npx!)add a debugger to your Puppeteer (node) codeadd ndb (or npx ndb) before your test command. For example:ndb jest or ndb mocha (or npx ndb jest / npx ndb mocha)debug your test inside chromium like a boss!Contributing​Check out our contributing guide to get an overview of Puppeteer development.FAQ​Our FAQ has migrated to our site.NextFAQCommunityStack OverflowTwitterYouTubeCopyright © 2022 Google, Inc.···\n                \"","time":{"start":1657158170477,"stop":1657158171543,"duration":1066}},{"uid":"2299a9798748aeb5","reportUrl":"https://camillomurcia.github.io/puppeteer-screenplay-jest-allure/83//#testresult/2299a9798748aeb5","status":"failed","statusDetails":"Error: expect(received).toContain(expected) // indexOf\n                \n                Expected substring: \"Puppeter\"\n                Received string:    \"\n                !function(){function t(t){document.documentElement.setAttribute(\\\"data-theme\\\",t)}var e=function(){var t=null;try{t=localStorage.getItem(\\\"theme\\\")}catch(t){}return t}();t(null!==e?e:\\\"light\\\")}()Skip to main contentPuppeteer15.3.1Next15.3.115.3.0ctrlKPuppeteerVersionsNext15.3.115.3.0← Back to main menuPuppeteerFAQTroubleshootingContributingChromium SupportAPIPuppeteerVersion: 15.3.1On this pagePuppeteer API | FAQ | Contributing | Troubleshooting​Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. Puppeteer runs headless by default, but can be configured to run full (non-headless) Chrome or Chromium.What can I do?​Most things that you can do manually in the browser can be done using Puppeteer! Here are a few examples to get you started:Generate screenshots and PDFs of pages.Crawl a SPA (Single-Page Application) and generate pre-rendered content (i.e. \\\"SSR\\\" (Server-Side Rendering)).Automate form submission, UI testing, keyboard input, etc.Create an up-to-date, automated testing environment. Run your tests directly in the latest version of Chrome using the latest JavaScript and browser features.Capture a timeline trace of your site to help diagnose performance issues.Test Chrome Extensions.Getting Started​Installation​To use Puppeteer in your project, run:npm i puppeteer# or \\\"yarn add puppeteer\\\"When you install Puppeteer, it downloads a recent version of Chromium (~170MB Mac, ~282MB Linux, ~280MB Win) that is guaranteed to work with the API (customizable through Environment Variables). For a version of Puppeteer purely for connection, see puppeteer-core.Environment Variables​Puppeteer looks for certain environment variables to aid its operations.\n                If Puppeteer doesn't find them in the environment during the installation step, a lowercased variant of these variables will be used from the npm config.HTTP_PROXY, HTTPS_PROXY, NO_PROXY - defines HTTP proxy settings that are used to download and run the browser.PUPPETEER_SKIP_CHROMIUM_DOWNLOAD - do not download bundled Chromium during installation step.PUPPETEER_TMP_DIR - defines the directory to be used by Puppeteer for creating temporary files. Defaults to os.tmpdir().PUPPETEER_DOWNLOAD_HOST - overwrite URL prefix that is used to download Chromium. Note: this includes protocol and might even include path prefix. Defaults to https://storage.googleapis.com.PUPPETEER_DOWNLOAD_PATH - overwrite the path for the downloads folder. Defaults to <root>/.local-chromium, where <root> is Puppeteer's package root.PUPPETEER_CHROMIUM_REVISION - specify a certain version of Chromium you'd like Puppeteer to use. See puppeteer.launch on how executable path is inferred.PUPPETEER_EXECUTABLE_PATH - specify an executable path to be used in puppeteer.launch.PUPPETEER_PRODUCT - specify which browser you'd like Puppeteer to use. Must be one of chrome or firefox. This can also be used during installation to fetch the recommended browser binary. Setting product programmatically in puppeteer.launch supersedes this environment variable. The product is exposed in puppeteer.productPUPPETEER_EXPERIMENTAL_CHROMIUM_MAC_ARM — specify Puppeteer download Chromium for Apple M1. On Apple M1 devices Puppeteer by default downloads the version for Intel's processor which runs via Rosetta. It works without any problems, however, with this option, you should get more efficient resource usage (CPU and RAM) that could lead to a faster execution time.dangerPuppeteer is only guaranteed to work with the bundled Chromium, use at your own risk.cautionPUPPETEER_* env variables are not accounted for in puppeteer-core.puppeteer-core​Every release since v1.7.0 we publish two packages:puppeteerpuppeteer-corepuppeteer is a product for browser automation. When installed, it downloads a version of\n                Chromium, which it then drives using puppeteer-core. Being an end-user product, puppeteer supports a bunch of convenient PUPPETEER_* env variables to tweak its behavior.puppeteer-core is a library to help drive anything that supports DevTools protocol. puppeteer-core doesn't download Chromium when installed. Being a library, puppeteer-core is fully driven\n                through its programmatic interface and disregards all the PUPPETEER_* env variables.To sum up, the only differences between puppeteer-core and puppeteer are:puppeteer-core doesn't automatically download Chromium when installed.puppeteer-core ignores all PUPPETEER_* env variables.In most cases, you'll be fine using the puppeteer package.However, you should use puppeteer-core if:you're building another end-user product or library atop of DevTools protocol. For example, one might build a PDF generator using puppeteer-core and write a custom install.js script that downloads headless_shell instead of Chromium to save disk space.you're bundling Puppeteer to use in Chrome Extension / browser with the DevTools protocol where downloading an additional Chromium binary is unnecessary.you're building a set of tools where puppeteer-core is one of the ingredients and you want to postpone install.js script execution until Chromium is about to be used.When using puppeteer-core, remember to change the include line:const puppeteer = require('puppeteer-core');You will then need to call puppeteer.connect or puppeteer.launch with an explicit executablePath or channel option.Usage​Puppeteer follows the latest maintenance LTS version of Node.Puppeteer will be familiar to people using other browser testing frameworks. You create an instance\n                of Browser, open pages, and then manipulate them with Puppeteer's API.Example - navigating to https://example.com and saving a screenshot as example.png:Save file as example.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  await page.screenshot({path: 'example.png'});  await browser.close();})();Execute script on the command linenode example.jsPuppeteer sets an initial page size to 800×600px, which defines the screenshot size. The page size can be customized with Page.setViewport().Example - create a PDF.Save file as hn.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://news.ycombinator.com', {    waitUntil: 'networkidle2',  });  await page.pdf({path: 'hn.pdf', format: 'a4'});  await browser.close();})();Execute script on the command linenode hn.jsSee Page.pdf for more information about creating pdfs.Example - evaluate script in the context of the pageSave file as get-dimensions.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  // Get the \\\"viewport\\\" of the page, as reported by the page.  const dimensions = await page.evaluate(() => {    return {      width: document.documentElement.clientWidth,      height: document.documentElement.clientHeight,      deviceScaleFactor: window.devicePixelRatio,    };  });  console.log('Dimensions:', dimensions);  await browser.close();})();Execute script on the command linenode get-dimensions.jsSee Page.evaluate and related methods like Page.evaluateOnNewDocument and Page.exposeFunction.Working with Chrome Extensions​Puppeteer can be used for testing Chrome Extensions.cautionExtensions in Chrome / Chromium currently only work in non-headless mode and experimental Chrome headless mode.The following is code for getting a handle to the background page of an extension whose source is located in ./my-extension:const puppeteer = require('puppeteer');(async () => {  const pathToExtension = require('path').join(__dirname, 'my-extension');  const browser = await puppeteer.launch({    headless: 'chrome',    args: [      `--disable-extensions-except=${pathToExtension}`,      `--load-extension=${pathToExtension}`,    ],  });  const backgroundPageTarget = await browser.waitForTarget(    target => target.type() === 'background_page'  );  const backgroundPage = await backgroundPageTarget.page();  // Test the background page as you would any other page.  await browser.close();})();noteChrome Manifest V3 extensions have a background ServiceWorker of type 'service_worker', instead of a page of type 'background_page'.noteIt is not yet possible to test extension popups or content scripts.Default runtime settings​1. Uses Headless modePuppeteer launches Chromium in headless mode. To launch a full version of Chromium, set the headless option when launching a browser:const browser = await puppeteer.launch({headless: false}); // default is true2. Runs a bundled version of ChromiumBy default, Puppeteer downloads and uses a specific version of Chromium so its API\n                is guaranteed to work out of the box. To use Puppeteer with a different version of Chrome or Chromium,\n                pass in the executable's path when creating a Browser instance:const browser = await puppeteer.launch({executablePath: '/path/to/Chrome'});You can also use Puppeteer with Firefox Nightly (experimental support). See Puppeteer.launch for more information.See this article for a description of the differences between Chromium and Chrome. This article describes some differences for Linux users.3. Creates a fresh user profilePuppeteer creates its own browser user profile which it cleans up on every run.Resources​API DocumentationExamplesCommunity list of Puppeteer resourcesDebugging tips​Turn off headless mode - sometimes it's useful to see what the browser is\n                displaying. Instead of launching in headless mode, launch a full version of\n                the browser using headless: false:const browser = await puppeteer.launch({headless: false});Slow it down - the slowMo option slows down Puppeteer operations by the\n                specified amount of milliseconds. It's another way to help see what's going on.const browser = await puppeteer.launch({  headless: false,  slowMo: 250, // slow down by 250ms});Capture console output - You can listen for the console event.\n                This is also handy when debugging code in page.evaluate():page.on('console', msg => console.log('PAGE LOG:', msg.text()));await page.evaluate(() => console.log(`url is ${location.href}`));Use debugger in application code browserThere are two execution context: node.js that is running test code, and the browser\n                running application code being tested. This lets you debug code in the\n                application code browser; ie code inside evaluate().Use {devtools: true} when launching Puppeteer:const browser = await puppeteer.launch({devtools: true});Change default test timeout:jest: jest.setTimeout(100000);jasmine: jasmine.DEFAULT_TIMEOUT_INTERVAL = 100000;mocha: this.timeout(100000); (don't forget to change test to use function and not '=>')Add an evaluate statement with debugger inside / add debugger to an existing evaluate statement:await page.evaluate(() => {  debugger;});The test will now stop executing in the above evaluate statement, and chromium will stop in debug mode.Use debugger in node.jsThis will let you debug test code. For example, you can step over await page.click() in the node.js script and see the click happen in the application code browser.Note that you won't be able to run await page.click() in\n                DevTools console due to this Chromium bug. So if\n                you want to try something out, you have to add it to your test file.Add debugger; to your test, eg:debugger;await page.click('a[target=_blank]');Set headless to falseRun node --inspect-brk, eg node --inspect-brk node_modules/.bin/jest testsIn Chrome open chrome://inspect/#devices and click inspectIn the newly opened test browser, type F8 to resume test executionNow your debugger will be hit and you can debug in the test browserEnable verbose logging - internal DevTools protocol traffic\n                will be logged via the debug module under the puppeteer namespace. # Basic verbose logging env DEBUG=\\\"puppeteer:*\\\" node script.js # Protocol traffic can be rather noisy. This example filters out all Network domain messages env DEBUG=\\\"puppeteer:*\\\" env DEBUG_COLORS=true node script.js 2>&1 | grep -v '\\\"Network'Debug your Puppeteer (node) code easily, using ndbnpm install -g ndb (or even better, use npx!)add a debugger to your Puppeteer (node) codeadd ndb (or npx ndb) before your test command. For example:ndb jest or ndb mocha (or npx ndb jest / npx ndb mocha)debug your test inside chromium like a boss!Contributing​Check out our contributing guide to get an overview of Puppeteer development.FAQ​Our FAQ has migrated to our site.NextFAQCommunityStack OverflowTwitterYouTubeCopyright © 2022 Google, Inc.···\n                \"","time":{"start":1657158149386,"stop":1657158150604,"duration":1218}},{"uid":"cdde0cc8c6b7b20f","reportUrl":"https://camillomurcia.github.io/puppeteer-screenplay-jest-allure/82//#testresult/cdde0cc8c6b7b20f","status":"failed","statusDetails":"Error: TypeError: Cannot destructure property 'scrollWidth' of 'r.current' as it is null.\n                    at https://pptr.dev/assets/js/17896441.9e827a15.js:1:27297","time":{"start":1657126607945,"stop":1657126608735,"duration":790}},{"uid":"d6b6f54c4511400d","reportUrl":"https://camillomurcia.github.io/puppeteer-screenplay-jest-allure/81//#testresult/d6b6f54c4511400d","status":"failed","statusDetails":"Error: expect(received).toContain(expected) // indexOf\n                \n                Expected substring: \"Puppeter\"\n                Received string:    \"\n                !function(){function t(t){document.documentElement.setAttribute(\\\"data-theme\\\",t)}var e=function(){var t=null;try{t=localStorage.getItem(\\\"theme\\\")}catch(t){}return t}();t(null!==e?e:\\\"light\\\")}()Skip to main contentPuppeteer15.3.0Next15.3.0ctrlKPuppeteerVersionsNext15.3.0← Back to main menuPuppeteerFAQTroubleshootingContributingChromium SupportAPIPuppeteerVersion: 15.3.0On this pagePuppeteer API | FAQ | Contributing | Troubleshooting​Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. Puppeteer runs headless by default, but can be configured to run full (non-headless) Chrome or Chromium.What can I do?​Most things that you can do manually in the browser can be done using Puppeteer! Here are a few examples to get you started:Generate screenshots and PDFs of pages.Crawl a SPA (Single-Page Application) and generate pre-rendered content (i.e. \\\"SSR\\\" (Server-Side Rendering)).Automate form submission, UI testing, keyboard input, etc.Create an up-to-date, automated testing environment. Run your tests directly in the latest version of Chrome using the latest JavaScript and browser features.Capture a timeline trace of your site to help diagnose performance issues.Test Chrome Extensions.Getting Started​Installation​To use Puppeteer in your project, run:npm i puppeteer# or \\\"yarn add puppeteer\\\"When you install Puppeteer, it downloads a recent version of Chromium (~170MB Mac, ~282MB Linux, ~280MB Win) that is guaranteed to work with the API (customizable through Environment Variables). For a version of Puppeteer purely for connection, see puppeteer-core.Environment Variables​Puppeteer looks for certain environment variables to aid its operations.\n                If Puppeteer doesn't find them in the environment during the installation step, a lowercased variant of these variables will be used from the npm config.HTTP_PROXY, HTTPS_PROXY, NO_PROXY - defines HTTP proxy settings that are used to download and run the browser.PUPPETEER_SKIP_CHROMIUM_DOWNLOAD - do not download bundled Chromium during installation step.PUPPETEER_TMP_DIR - defines the directory to be used by Puppeteer for creating temporary files. Defaults to os.tmpdir().PUPPETEER_DOWNLOAD_HOST - overwrite URL prefix that is used to download Chromium. Note: this includes protocol and might even include path prefix. Defaults to https://storage.googleapis.com.PUPPETEER_DOWNLOAD_PATH - overwrite the path for the downloads folder. Defaults to <root>/.local-chromium, where <root> is Puppeteer's package root.PUPPETEER_CHROMIUM_REVISION - specify a certain version of Chromium you'd like Puppeteer to use. See puppeteer.launch on how executable path is inferred.PUPPETEER_EXECUTABLE_PATH - specify an executable path to be used in puppeteer.launch.PUPPETEER_PRODUCT - specify which browser you'd like Puppeteer to use. Must be one of chrome or firefox. This can also be used during installation to fetch the recommended browser binary. Setting product programmatically in puppeteer.launch supersedes this environment variable. The product is exposed in puppeteer.productPUPPETEER_EXPERIMENTAL_CHROMIUM_MAC_ARM — specify Puppeteer download Chromium for Apple M1. On Apple M1 devices Puppeteer by default downloads the version for Intel's processor which runs via Rosetta. It works without any problems, however, with this option, you should get more efficient resource usage (CPU and RAM) that could lead to a faster execution time.dangerPuppeteer is only guaranteed to work with the bundled Chromium, use at your own risk.cautionPUPPETEER_* env variables are not accounted for in puppeteer-core.puppeteer-core​Every release since v1.7.0 we publish two packages:puppeteerpuppeteer-corepuppeteer is a product for browser automation. When installed, it downloads a version of\n                Chromium, which it then drives using puppeteer-core. Being an end-user product, puppeteer supports a bunch of convenient PUPPETEER_* env variables to tweak its behavior.puppeteer-core is a library to help drive anything that supports DevTools protocol. puppeteer-core doesn't download Chromium when installed. Being a library, puppeteer-core is fully driven\n                through its programmatic interface and disregards all the PUPPETEER_* env variables.To sum up, the only differences between puppeteer-core and puppeteer are:puppeteer-core doesn't automatically download Chromium when installed.puppeteer-core ignores all PUPPETEER_* env variables.In most cases, you'll be fine using the puppeteer package.However, you should use puppeteer-core if:you're building another end-user product or library atop of DevTools protocol. For example, one might build a PDF generator using puppeteer-core and write a custom install.js script that downloads headless_shell instead of Chromium to save disk space.you're bundling Puppeteer to use in Chrome Extension / browser with the DevTools protocol where downloading an additional Chromium binary is unnecessary.you're building a set of tools where puppeteer-core is one of the ingredients and you want to postpone install.js script execution until Chromium is about to be used.When using puppeteer-core, remember to change the include line:const puppeteer = require('puppeteer-core');You will then need to call puppeteer.connect or puppeteer.launch with an explicit executablePath or channel option.Usage​Puppeteer follows the latest maintenance LTS version of Node.Puppeteer will be familiar to people using other browser testing frameworks. You create an instance\n                of Browser, open pages, and then manipulate them with Puppeteer's API.Example - navigating to https://example.com and saving a screenshot as example.png:Save file as example.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  await page.screenshot({path: 'example.png'});  await browser.close();})();Execute script on the command linenode example.jsPuppeteer sets an initial page size to 800×600px, which defines the screenshot size. The page size can be customized with Page.setViewport().Example - create a PDF.Save file as hn.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://news.ycombinator.com', {    waitUntil: 'networkidle2',  });  await page.pdf({path: 'hn.pdf', format: 'a4'});  await browser.close();})();Execute script on the command linenode hn.jsSee Page.pdf for more information about creating pdfs.Example - evaluate script in the context of the pageSave file as get-dimensions.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  // Get the \\\"viewport\\\" of the page, as reported by the page.  const dimensions = await page.evaluate(() => {    return {      width: document.documentElement.clientWidth,      height: document.documentElement.clientHeight,      deviceScaleFactor: window.devicePixelRatio,    };  });  console.log('Dimensions:', dimensions);  await browser.close();})();Execute script on the command linenode get-dimensions.jsSee Page.evaluate and related methods like Page.evaluateOnNewDocument and Page.exposeFunction.Working with Chrome Extensions​Puppeteer can be used for testing Chrome Extensions.cautionExtensions in Chrome / Chromium currently only work in non-headless mode and experimental Chrome headless mode.The following is code for getting a handle to the background page of an extension whose source is located in ./my-extension:const puppeteer = require('puppeteer');(async () => {  const pathToExtension = require('path').join(__dirname, 'my-extension');  const browser = await puppeteer.launch({    headless: 'chrome',    args: [      `--disable-extensions-except=${pathToExtension}`,      `--load-extension=${pathToExtension}`,    ],  });  const backgroundPageTarget = await browser.waitForTarget(    target => target.type() === 'background_page'  );  const backgroundPage = await backgroundPageTarget.page();  // Test the background page as you would any other page.  await browser.close();})();noteChrome Manifest V3 extensions have a background ServiceWorker of type 'service_worker', instead of a page of type 'background_page'.noteIt is not yet possible to test extension popups or content scripts.Default runtime settings​1. Uses Headless modePuppeteer launches Chromium in headless mode. To launch a full version of Chromium, set the headless option when launching a browser:const browser = await puppeteer.launch({headless: false}); // default is true2. Runs a bundled version of ChromiumBy default, Puppeteer downloads and uses a specific version of Chromium so its API\n                is guaranteed to work out of the box. To use Puppeteer with a different version of Chrome or Chromium,\n                pass in the executable's path when creating a Browser instance:const browser = await puppeteer.launch({executablePath: '/path/to/Chrome'});You can also use Puppeteer with Firefox Nightly (experimental support). See Puppeteer.launch for more information.See this article for a description of the differences between Chromium and Chrome. This article describes some differences for Linux users.3. Creates a fresh user profilePuppeteer creates its own browser user profile which it cleans up on every run.Resources​API DocumentationExamplesCommunity list of Puppeteer resourcesDebugging tips​Turn off headless mode - sometimes it's useful to see what the browser is\n                displaying. Instead of launching in headless mode, launch a full version of\n                the browser using headless: false:const browser = await puppeteer.launch({headless: false});Slow it down - the slowMo option slows down Puppeteer operations by the\n                specified amount of milliseconds. It's another way to help see what's going on.const browser = await puppeteer.launch({  headless: false,  slowMo: 250, // slow down by 250ms});Capture console output - You can listen for the console event.\n                This is also handy when debugging code in page.evaluate():page.on('console', msg => console.log('PAGE LOG:', msg.text()));await page.evaluate(() => console.log(`url is ${location.href}`));Use debugger in application code browserThere are two execution context: node.js that is running test code, and the browser\n                running application code being tested. This lets you debug code in the\n                application code browser; ie code inside evaluate().Use {devtools: true} when launching Puppeteer:const browser = await puppeteer.launch({devtools: true});Change default test timeout:jest: jest.setTimeout(100000);jasmine: jasmine.DEFAULT_TIMEOUT_INTERVAL = 100000;mocha: this.timeout(100000); (don't forget to change test to use function and not '=>')Add an evaluate statement with debugger inside / add debugger to an existing evaluate statement:await page.evaluate(() => {  debugger;});The test will now stop executing in the above evaluate statement, and chromium will stop in debug mode.Use debugger in node.jsThis will let you debug test code. For example, you can step over await page.click() in the node.js script and see the click happen in the application code browser.Note that you won't be able to run await page.click() in\n                DevTools console due to this Chromium bug. So if\n                you want to try something out, you have to add it to your test file.Add debugger; to your test, eg:debugger;await page.click('a[target=_blank]');Set headless to falseRun node --inspect-brk, eg node --inspect-brk node_modules/.bin/jest testsIn Chrome open chrome://inspect/#devices and click inspectIn the newly opened test browser, type F8 to resume test executionNow your debugger will be hit and you can debug in the test browserEnable verbose logging - internal DevTools protocol traffic\n                will be logged via the debug module under the puppeteer namespace. # Basic verbose logging env DEBUG=\\\"puppeteer:*\\\" node script.js # Protocol traffic can be rather noisy. This example filters out all Network domain messages env DEBUG=\\\"puppeteer:*\\\" env DEBUG_COLORS=true node script.js 2>&1 | grep -v '\\\"Network'Debug your Puppeteer (node) code easily, using ndbnpm install -g ndb (or even better, use npx!)add a debugger to your Puppeteer (node) codeadd ndb (or npx ndb) before your test command. For example:ndb jest or ndb mocha (or npx ndb jest / npx ndb mocha)debug your test inside chromium like a boss!Contributing​Check out our contributing guide to get an overview of Puppeteer development.FAQ​Our FAQ has migrated to our site.NextFAQCommunityStack OverflowTwitterYouTubeCopyright © 2022 Google, Inc.···\n                \"","time":{"start":1657074264031,"stop":1657074265405,"duration":1374}},{"uid":"3893514d47a88421","reportUrl":"https://camillomurcia.github.io/puppeteer-screenplay-jest-allure/80//#testresult/3893514d47a88421","status":"failed","statusDetails":"Error: expect(received).toContain(expected) // indexOf\n                \n                Expected substring: \"Puppeter\"\n                Received string:    \"\n                !function(){function t(t){document.documentElement.setAttribute(\\\"data-theme\\\",t)}var e=function(){var t=null;try{t=localStorage.getItem(\\\"theme\\\")}catch(t){}return t}();t(null!==e?e:\\\"light\\\")}()Skip to main contentPuppeteer15.3.0Next15.3.0ctrlKPuppeteerVersionsNext15.3.0← Back to main menuPuppeteerFAQTroubleshootingContributingChromium SupportAPIPuppeteerVersion: 15.3.0On this pagePuppeteer API | FAQ | Contributing | Troubleshooting​Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. Puppeteer runs headless by default, but can be configured to run full (non-headless) Chrome or Chromium.What can I do?​Most things that you can do manually in the browser can be done using Puppeteer! Here are a few examples to get you started:Generate screenshots and PDFs of pages.Crawl a SPA (Single-Page Application) and generate pre-rendered content (i.e. \\\"SSR\\\" (Server-Side Rendering)).Automate form submission, UI testing, keyboard input, etc.Create an up-to-date, automated testing environment. Run your tests directly in the latest version of Chrome using the latest JavaScript and browser features.Capture a timeline trace of your site to help diagnose performance issues.Test Chrome Extensions.Getting Started​Installation​To use Puppeteer in your project, run:npm i puppeteer# or \\\"yarn add puppeteer\\\"When you install Puppeteer, it downloads a recent version of Chromium (~170MB Mac, ~282MB Linux, ~280MB Win) that is guaranteed to work with the API (customizable through Environment Variables). For a version of Puppeteer purely for connection, see puppeteer-core.Environment Variables​Puppeteer looks for certain environment variables to aid its operations.\n                If Puppeteer doesn't find them in the environment during the installation step, a lowercased variant of these variables will be used from the npm config.HTTP_PROXY, HTTPS_PROXY, NO_PROXY - defines HTTP proxy settings that are used to download and run the browser.PUPPETEER_SKIP_CHROMIUM_DOWNLOAD - do not download bundled Chromium during installation step.PUPPETEER_TMP_DIR - defines the directory to be used by Puppeteer for creating temporary files. Defaults to os.tmpdir().PUPPETEER_DOWNLOAD_HOST - overwrite URL prefix that is used to download Chromium. Note: this includes protocol and might even include path prefix. Defaults to https://storage.googleapis.com.PUPPETEER_DOWNLOAD_PATH - overwrite the path for the downloads folder. Defaults to <root>/.local-chromium, where <root> is Puppeteer's package root.PUPPETEER_CHROMIUM_REVISION - specify a certain version of Chromium you'd like Puppeteer to use. See puppeteer.launch on how executable path is inferred.PUPPETEER_EXECUTABLE_PATH - specify an executable path to be used in puppeteer.launch.PUPPETEER_PRODUCT - specify which browser you'd like Puppeteer to use. Must be one of chrome or firefox. This can also be used during installation to fetch the recommended browser binary. Setting product programmatically in puppeteer.launch supersedes this environment variable. The product is exposed in puppeteer.productPUPPETEER_EXPERIMENTAL_CHROMIUM_MAC_ARM — specify Puppeteer download Chromium for Apple M1. On Apple M1 devices Puppeteer by default downloads the version for Intel's processor which runs via Rosetta. It works without any problems, however, with this option, you should get more efficient resource usage (CPU and RAM) that could lead to a faster execution time.dangerPuppeteer is only guaranteed to work with the bundled Chromium, use at your own risk.cautionPUPPETEER_* env variables are not accounted for in puppeteer-core.puppeteer-core​Every release since v1.7.0 we publish two packages:puppeteerpuppeteer-corepuppeteer is a product for browser automation. When installed, it downloads a version of\n                Chromium, which it then drives using puppeteer-core. Being an end-user product, puppeteer supports a bunch of convenient PUPPETEER_* env variables to tweak its behavior.puppeteer-core is a library to help drive anything that supports DevTools protocol. puppeteer-core doesn't download Chromium when installed. Being a library, puppeteer-core is fully driven\n                through its programmatic interface and disregards all the PUPPETEER_* env variables.To sum up, the only differences between puppeteer-core and puppeteer are:puppeteer-core doesn't automatically download Chromium when installed.puppeteer-core ignores all PUPPETEER_* env variables.In most cases, you'll be fine using the puppeteer package.However, you should use puppeteer-core if:you're building another end-user product or library atop of DevTools protocol. For example, one might build a PDF generator using puppeteer-core and write a custom install.js script that downloads headless_shell instead of Chromium to save disk space.you're bundling Puppeteer to use in Chrome Extension / browser with the DevTools protocol where downloading an additional Chromium binary is unnecessary.you're building a set of tools where puppeteer-core is one of the ingredients and you want to postpone install.js script execution until Chromium is about to be used.When using puppeteer-core, remember to change the include line:const puppeteer = require('puppeteer-core');You will then need to call puppeteer.connect or puppeteer.launch with an explicit executablePath or channel option.Usage​Puppeteer follows the latest maintenance LTS version of Node.Puppeteer will be familiar to people using other browser testing frameworks. You create an instance\n                of Browser, open pages, and then manipulate them with Puppeteer's API.Example - navigating to https://example.com and saving a screenshot as example.png:Save file as example.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  await page.screenshot({path: 'example.png'});  await browser.close();})();Execute script on the command linenode example.jsPuppeteer sets an initial page size to 800×600px, which defines the screenshot size. The page size can be customized with Page.setViewport().Example - create a PDF.Save file as hn.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://news.ycombinator.com', {    waitUntil: 'networkidle2',  });  await page.pdf({path: 'hn.pdf', format: 'a4'});  await browser.close();})();Execute script on the command linenode hn.jsSee Page.pdf for more information about creating pdfs.Example - evaluate script in the context of the pageSave file as get-dimensions.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  // Get the \\\"viewport\\\" of the page, as reported by the page.  const dimensions = await page.evaluate(() => {    return {      width: document.documentElement.clientWidth,      height: document.documentElement.clientHeight,      deviceScaleFactor: window.devicePixelRatio,    };  });  console.log('Dimensions:', dimensions);  await browser.close();})();Execute script on the command linenode get-dimensions.jsSee Page.evaluate and related methods like Page.evaluateOnNewDocument and Page.exposeFunction.Working with Chrome Extensions​Puppeteer can be used for testing Chrome Extensions.cautionExtensions in Chrome / Chromium currently only work in non-headless mode and experimental Chrome headless mode.The following is code for getting a handle to the background page of an extension whose source is located in ./my-extension:const puppeteer = require('puppeteer');(async () => {  const pathToExtension = require('path').join(__dirname, 'my-extension');  const browser = await puppeteer.launch({    headless: 'chrome',    args: [      `--disable-extensions-except=${pathToExtension}`,      `--load-extension=${pathToExtension}`,    ],  });  const backgroundPageTarget = await browser.waitForTarget(    target => target.type() === 'background_page'  );  const backgroundPage = await backgroundPageTarget.page();  // Test the background page as you would any other page.  await browser.close();})();noteChrome Manifest V3 extensions have a background ServiceWorker of type 'service_worker', instead of a page of type 'background_page'.noteIt is not yet possible to test extension popups or content scripts.Default runtime settings​1. Uses Headless modePuppeteer launches Chromium in headless mode. To launch a full version of Chromium, set the headless option when launching a browser:const browser = await puppeteer.launch({headless: false}); // default is true2. Runs a bundled version of ChromiumBy default, Puppeteer downloads and uses a specific version of Chromium so its API\n                is guaranteed to work out of the box. To use Puppeteer with a different version of Chrome or Chromium,\n                pass in the executable's path when creating a Browser instance:const browser = await puppeteer.launch({executablePath: '/path/to/Chrome'});You can also use Puppeteer with Firefox Nightly (experimental support). See Puppeteer.launch for more information.See this article for a description of the differences between Chromium and Chrome. This article describes some differences for Linux users.3. Creates a fresh user profilePuppeteer creates its own browser user profile which it cleans up on every run.Resources​API DocumentationExamplesCommunity list of Puppeteer resourcesDebugging tips​Turn off headless mode - sometimes it's useful to see what the browser is\n                displaying. Instead of launching in headless mode, launch a full version of\n                the browser using headless: false:const browser = await puppeteer.launch({headless: false});Slow it down - the slowMo option slows down Puppeteer operations by the\n                specified amount of milliseconds. It's another way to help see what's going on.const browser = await puppeteer.launch({  headless: false,  slowMo: 250, // slow down by 250ms});Capture console output - You can listen for the console event.\n                This is also handy when debugging code in page.evaluate():page.on('console', msg => console.log('PAGE LOG:', msg.text()));await page.evaluate(() => console.log(`url is ${location.href}`));Use debugger in application code browserThere are two execution context: node.js that is running test code, and the browser\n                running application code being tested. This lets you debug code in the\n                application code browser; ie code inside evaluate().Use {devtools: true} when launching Puppeteer:const browser = await puppeteer.launch({devtools: true});Change default test timeout:jest: jest.setTimeout(100000);jasmine: jasmine.DEFAULT_TIMEOUT_INTERVAL = 100000;mocha: this.timeout(100000); (don't forget to change test to use function and not '=>')Add an evaluate statement with debugger inside / add debugger to an existing evaluate statement:await page.evaluate(() => {  debugger;});The test will now stop executing in the above evaluate statement, and chromium will stop in debug mode.Use debugger in node.jsThis will let you debug test code. For example, you can step over await page.click() in the node.js script and see the click happen in the application code browser.Note that you won't be able to run await page.click() in\n                DevTools console due to this Chromium bug. So if\n                you want to try something out, you have to add it to your test file.Add debugger; to your test, eg:debugger;await page.click('a[target=_blank]');Set headless to falseRun node --inspect-brk, eg node --inspect-brk node_modules/.bin/jest testsIn Chrome open chrome://inspect/#devices and click inspectIn the newly opened test browser, type F8 to resume test executionNow your debugger will be hit and you can debug in the test browserEnable verbose logging - internal DevTools protocol traffic\n                will be logged via the debug module under the puppeteer namespace. # Basic verbose logging env DEBUG=\\\"puppeteer:*\\\" node script.js # Protocol traffic can be rather noisy. This example filters out all Network domain messages env DEBUG=\\\"puppeteer:*\\\" env DEBUG_COLORS=true node script.js 2>&1 | grep -v '\\\"Network'Debug your Puppeteer (node) code easily, using ndbnpm install -g ndb (or even better, use npx!)add a debugger to your Puppeteer (node) codeadd ndb (or npx ndb) before your test command. For example:ndb jest or ndb mocha (or npx ndb jest / npx ndb mocha)debug your test inside chromium like a boss!Contributing​Check out our contributing guide to get an overview of Puppeteer development.FAQ​Our FAQ has migrated to our site.NextFAQCommunityStack OverflowTwitterYouTubeCopyright © 2022 Google, Inc.···\n                \"","time":{"start":1657032214391,"stop":1657032215267,"duration":876}},{"uid":"a66e102a61a4f698","reportUrl":"https://camillomurcia.github.io/puppeteer-screenplay-jest-allure/79//#testresult/a66e102a61a4f698","status":"failed","statusDetails":"Error: expect(received).toContain(expected) // indexOf\n                \n                Expected substring: \"Puppeter\"\n                Received string:    \"\n                !function(){function t(t){document.documentElement.setAttribute(\\\"data-theme\\\",t)}var e=function(){var t=null;try{t=localStorage.getItem(\\\"theme\\\")}catch(t){}return t}();t(null!==e?e:\\\"light\\\")}()Skip to main contentPuppeteer15.3.0Next15.3.0ctrlKPuppeteerVersionsNext15.3.0← Back to main menuPuppeteerFAQTroubleshootingContributingChromium SupportAPIPuppeteerVersion: 15.3.0On this pagePuppeteer API | FAQ | Contributing | Troubleshooting​Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. Puppeteer runs headless by default, but can be configured to run full (non-headless) Chrome or Chromium.What can I do?​Most things that you can do manually in the browser can be done using Puppeteer! Here are a few examples to get you started:Generate screenshots and PDFs of pages.Crawl a SPA (Single-Page Application) and generate pre-rendered content (i.e. \\\"SSR\\\" (Server-Side Rendering)).Automate form submission, UI testing, keyboard input, etc.Create an up-to-date, automated testing environment. Run your tests directly in the latest version of Chrome using the latest JavaScript and browser features.Capture a timeline trace of your site to help diagnose performance issues.Test Chrome Extensions.Getting Started​Installation​To use Puppeteer in your project, run:npm i puppeteer# or \\\"yarn add puppeteer\\\"When you install Puppeteer, it downloads a recent version of Chromium (~170MB Mac, ~282MB Linux, ~280MB Win) that is guaranteed to work with the API (customizable through Environment Variables). For a version of Puppeteer purely for connection, see puppeteer-core.Environment Variables​Puppeteer looks for certain environment variables to aid its operations.\n                If Puppeteer doesn't find them in the environment during the installation step, a lowercased variant of these variables will be used from the npm config.HTTP_PROXY, HTTPS_PROXY, NO_PROXY - defines HTTP proxy settings that are used to download and run the browser.PUPPETEER_SKIP_CHROMIUM_DOWNLOAD - do not download bundled Chromium during installation step.PUPPETEER_TMP_DIR - defines the directory to be used by Puppeteer for creating temporary files. Defaults to os.tmpdir().PUPPETEER_DOWNLOAD_HOST - overwrite URL prefix that is used to download Chromium. Note: this includes protocol and might even include path prefix. Defaults to https://storage.googleapis.com.PUPPETEER_DOWNLOAD_PATH - overwrite the path for the downloads folder. Defaults to <root>/.local-chromium, where <root> is Puppeteer's package root.PUPPETEER_CHROMIUM_REVISION - specify a certain version of Chromium you'd like Puppeteer to use. See puppeteer.launch on how executable path is inferred.PUPPETEER_EXECUTABLE_PATH - specify an executable path to be used in puppeteer.launch.PUPPETEER_PRODUCT - specify which browser you'd like Puppeteer to use. Must be one of chrome or firefox. This can also be used during installation to fetch the recommended browser binary. Setting product programmatically in puppeteer.launch supersedes this environment variable. The product is exposed in puppeteer.productPUPPETEER_EXPERIMENTAL_CHROMIUM_MAC_ARM — specify Puppeteer download Chromium for Apple M1. On Apple M1 devices Puppeteer by default downloads the version for Intel's processor which runs via Rosetta. It works without any problems, however, with this option, you should get more efficient resource usage (CPU and RAM) that could lead to a faster execution time.dangerPuppeteer is only guaranteed to work with the bundled Chromium, use at your own risk.cautionPUPPETEER_* env variables are not accounted for in puppeteer-core.puppeteer-core​Every release since v1.7.0 we publish two packages:puppeteerpuppeteer-corepuppeteer is a product for browser automation. When installed, it downloads a version of\n                Chromium, which it then drives using puppeteer-core. Being an end-user product, puppeteer supports a bunch of convenient PUPPETEER_* env variables to tweak its behavior.puppeteer-core is a library to help drive anything that supports DevTools protocol. puppeteer-core doesn't download Chromium when installed. Being a library, puppeteer-core is fully driven\n                through its programmatic interface and disregards all the PUPPETEER_* env variables.To sum up, the only differences between puppeteer-core and puppeteer are:puppeteer-core doesn't automatically download Chromium when installed.puppeteer-core ignores all PUPPETEER_* env variables.In most cases, you'll be fine using the puppeteer package.However, you should use puppeteer-core if:you're building another end-user product or library atop of DevTools protocol. For example, one might build a PDF generator using puppeteer-core and write a custom install.js script that downloads headless_shell instead of Chromium to save disk space.you're bundling Puppeteer to use in Chrome Extension / browser with the DevTools protocol where downloading an additional Chromium binary is unnecessary.you're building a set of tools where puppeteer-core is one of the ingredients and you want to postpone install.js script execution until Chromium is about to be used.When using puppeteer-core, remember to change the include line:const puppeteer = require('puppeteer-core');You will then need to call puppeteer.connect or puppeteer.launch with an explicit executablePath or channel option.Usage​Puppeteer follows the latest maintenance LTS version of Node.Puppeteer will be familiar to people using other browser testing frameworks. You create an instance\n                of Browser, open pages, and then manipulate them with Puppeteer's API.Example - navigating to https://example.com and saving a screenshot as example.png:Save file as example.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  await page.screenshot({path: 'example.png'});  await browser.close();})();Execute script on the command linenode example.jsPuppeteer sets an initial page size to 800×600px, which defines the screenshot size. The page size can be customized with Page.setViewport().Example - create a PDF.Save file as hn.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://news.ycombinator.com', {    waitUntil: 'networkidle2',  });  await page.pdf({path: 'hn.pdf', format: 'a4'});  await browser.close();})();Execute script on the command linenode hn.jsSee Page.pdf for more information about creating pdfs.Example - evaluate script in the context of the pageSave file as get-dimensions.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  // Get the \\\"viewport\\\" of the page, as reported by the page.  const dimensions = await page.evaluate(() => {    return {      width: document.documentElement.clientWidth,      height: document.documentElement.clientHeight,      deviceScaleFactor: window.devicePixelRatio,    };  });  console.log('Dimensions:', dimensions);  await browser.close();})();Execute script on the command linenode get-dimensions.jsSee Page.evaluate and related methods like Page.evaluateOnNewDocument and Page.exposeFunction.Working with Chrome Extensions​Puppeteer can be used for testing Chrome Extensions.cautionExtensions in Chrome / Chromium currently only work in non-headless mode and experimental Chrome headless mode.The following is code for getting a handle to the background page of an extension whose source is located in ./my-extension:const puppeteer = require('puppeteer');(async () => {  const pathToExtension = require('path').join(__dirname, 'my-extension');  const browser = await puppeteer.launch({    headless: 'chrome',    args: [      `--disable-extensions-except=${pathToExtension}`,      `--load-extension=${pathToExtension}`,    ],  });  const backgroundPageTarget = await browser.waitForTarget(    target => target.type() === 'background_page'  );  const backgroundPage = await backgroundPageTarget.page();  // Test the background page as you would any other page.  await browser.close();})();noteChrome Manifest V3 extensions have a background ServiceWorker of type 'service_worker', instead of a page of type 'background_page'.noteIt is not yet possible to test extension popups or content scripts.Default runtime settings​1. Uses Headless modePuppeteer launches Chromium in headless mode. To launch a full version of Chromium, set the headless option when launching a browser:const browser = await puppeteer.launch({headless: false}); // default is true2. Runs a bundled version of ChromiumBy default, Puppeteer downloads and uses a specific version of Chromium so its API\n                is guaranteed to work out of the box. To use Puppeteer with a different version of Chrome or Chromium,\n                pass in the executable's path when creating a Browser instance:const browser = await puppeteer.launch({executablePath: '/path/to/Chrome'});You can also use Puppeteer with Firefox Nightly (experimental support). See Puppeteer.launch for more information.See this article for a description of the differences between Chromium and Chrome. This article describes some differences for Linux users.3. Creates a fresh user profilePuppeteer creates its own browser user profile which it cleans up on every run.Resources​API DocumentationExamplesCommunity list of Puppeteer resourcesDebugging tips​Turn off headless mode - sometimes it's useful to see what the browser is\n                displaying. Instead of launching in headless mode, launch a full version of\n                the browser using headless: false:const browser = await puppeteer.launch({headless: false});Slow it down - the slowMo option slows down Puppeteer operations by the\n                specified amount of milliseconds. It's another way to help see what's going on.const browser = await puppeteer.launch({  headless: false,  slowMo: 250, // slow down by 250ms});Capture console output - You can listen for the console event.\n                This is also handy when debugging code in page.evaluate():page.on('console', msg => console.log('PAGE LOG:', msg.text()));await page.evaluate(() => console.log(`url is ${location.href}`));Use debugger in application code browserThere are two execution context: node.js that is running test code, and the browser\n                running application code being tested. This lets you debug code in the\n                application code browser; ie code inside evaluate().Use {devtools: true} when launching Puppeteer:const browser = await puppeteer.launch({devtools: true});Change default test timeout:jest: jest.setTimeout(100000);jasmine: jasmine.DEFAULT_TIMEOUT_INTERVAL = 100000;mocha: this.timeout(100000); (don't forget to change test to use function and not '=>')Add an evaluate statement with debugger inside / add debugger to an existing evaluate statement:await page.evaluate(() => {  debugger;});The test will now stop executing in the above evaluate statement, and chromium will stop in debug mode.Use debugger in node.jsThis will let you debug test code. For example, you can step over await page.click() in the node.js script and see the click happen in the application code browser.Note that you won't be able to run await page.click() in\n                DevTools console due to this Chromium bug. So if\n                you want to try something out, you have to add it to your test file.Add debugger; to your test, eg:debugger;await page.click('a[target=_blank]');Set headless to falseRun node --inspect-brk, eg node --inspect-brk node_modules/.bin/jest testsIn Chrome open chrome://inspect/#devices and click inspectIn the newly opened test browser, type F8 to resume test executionNow your debugger will be hit and you can debug in the test browserEnable verbose logging - internal DevTools protocol traffic\n                will be logged via the debug module under the puppeteer namespace. # Basic verbose logging env DEBUG=\\\"puppeteer:*\\\" node script.js # Protocol traffic can be rather noisy. This example filters out all Network domain messages env DEBUG=\\\"puppeteer:*\\\" env DEBUG_COLORS=true node script.js 2>&1 | grep -v '\\\"Network'Debug your Puppeteer (node) code easily, using ndbnpm install -g ndb (or even better, use npx!)add a debugger to your Puppeteer (node) codeadd ndb (or npx ndb) before your test command. For example:ndb jest or ndb mocha (or npx ndb jest / npx ndb mocha)debug your test inside chromium like a boss!Contributing​Check out our contributing guide to get an overview of Puppeteer development.FAQ​Our FAQ has migrated to our site.NextFAQCommunityStack OverflowTwitterYouTubeCopyright © 2022 Google, Inc.···\n                \"","time":{"start":1657031892711,"stop":1657031893696,"duration":985}},{"uid":"7e1874d46835e0c5","reportUrl":"https://camillomurcia.github.io/puppeteer-screenplay-jest-allure/78//#testresult/7e1874d46835e0c5","status":"failed","statusDetails":"Error: TypeError: Cannot destructure property 'scrollWidth' of 'r.current' as it is null.\n                    at https://pptr.dev/assets/js/17896441.9e827a15.js:1:27297","time":{"start":1657031784485,"stop":1657031785097,"duration":612}},{"uid":"1dcb66dc76b8f2d6","reportUrl":"https://camillomurcia.github.io/puppeteer-screenplay-jest-allure/77//#testresult/1dcb66dc76b8f2d6","status":"failed","statusDetails":"Error: expect(received).toContain(expected) // indexOf\n                \n                Expected substring: \"Puppeter\"\n                Received string:    \"\n                !function(){function t(t){document.documentElement.setAttribute(\\\"data-theme\\\",t)}var e=function(){var t=null;try{t=localStorage.getItem(\\\"theme\\\")}catch(t){}return t}();t(null!==e?e:\\\"light\\\")}()Skip to main contentPuppeteer15.3.0Next15.3.0ctrlKPuppeteerVersionsNext15.3.0← Back to main menuPuppeteerFAQTroubleshootingContributingChromium SupportAPIPuppeteerVersion: 15.3.0On this pagePuppeteer API | FAQ | Contributing | Troubleshooting​Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. Puppeteer runs headless by default, but can be configured to run full (non-headless) Chrome or Chromium.What can I do?​Most things that you can do manually in the browser can be done using Puppeteer! Here are a few examples to get you started:Generate screenshots and PDFs of pages.Crawl a SPA (Single-Page Application) and generate pre-rendered content (i.e. \\\"SSR\\\" (Server-Side Rendering)).Automate form submission, UI testing, keyboard input, etc.Create an up-to-date, automated testing environment. Run your tests directly in the latest version of Chrome using the latest JavaScript and browser features.Capture a timeline trace of your site to help diagnose performance issues.Test Chrome Extensions.Getting Started​Installation​To use Puppeteer in your project, run:npm i puppeteer# or \\\"yarn add puppeteer\\\"When you install Puppeteer, it downloads a recent version of Chromium (~170MB Mac, ~282MB Linux, ~280MB Win) that is guaranteed to work with the API (customizable through Environment Variables). For a version of Puppeteer purely for connection, see puppeteer-core.Environment Variables​Puppeteer looks for certain environment variables to aid its operations.\n                If Puppeteer doesn't find them in the environment during the installation step, a lowercased variant of these variables will be used from the npm config.HTTP_PROXY, HTTPS_PROXY, NO_PROXY - defines HTTP proxy settings that are used to download and run the browser.PUPPETEER_SKIP_CHROMIUM_DOWNLOAD - do not download bundled Chromium during installation step.PUPPETEER_TMP_DIR - defines the directory to be used by Puppeteer for creating temporary files. Defaults to os.tmpdir().PUPPETEER_DOWNLOAD_HOST - overwrite URL prefix that is used to download Chromium. Note: this includes protocol and might even include path prefix. Defaults to https://storage.googleapis.com.PUPPETEER_DOWNLOAD_PATH - overwrite the path for the downloads folder. Defaults to <root>/.local-chromium, where <root> is Puppeteer's package root.PUPPETEER_CHROMIUM_REVISION - specify a certain version of Chromium you'd like Puppeteer to use. See puppeteer.launch on how executable path is inferred.PUPPETEER_EXECUTABLE_PATH - specify an executable path to be used in puppeteer.launch.PUPPETEER_PRODUCT - specify which browser you'd like Puppeteer to use. Must be one of chrome or firefox. This can also be used during installation to fetch the recommended browser binary. Setting product programmatically in puppeteer.launch supersedes this environment variable. The product is exposed in puppeteer.productPUPPETEER_EXPERIMENTAL_CHROMIUM_MAC_ARM — specify Puppeteer download Chromium for Apple M1. On Apple M1 devices Puppeteer by default downloads the version for Intel's processor which runs via Rosetta. It works without any problems, however, with this option, you should get more efficient resource usage (CPU and RAM) that could lead to a faster execution time.dangerPuppeteer is only guaranteed to work with the bundled Chromium, use at your own risk.cautionPUPPETEER_* env variables are not accounted for in puppeteer-core.puppeteer-core​Every release since v1.7.0 we publish two packages:puppeteerpuppeteer-corepuppeteer is a product for browser automation. When installed, it downloads a version of\n                Chromium, which it then drives using puppeteer-core. Being an end-user product, puppeteer supports a bunch of convenient PUPPETEER_* env variables to tweak its behavior.puppeteer-core is a library to help drive anything that supports DevTools protocol. puppeteer-core doesn't download Chromium when installed. Being a library, puppeteer-core is fully driven\n                through its programmatic interface and disregards all the PUPPETEER_* env variables.To sum up, the only differences between puppeteer-core and puppeteer are:puppeteer-core doesn't automatically download Chromium when installed.puppeteer-core ignores all PUPPETEER_* env variables.In most cases, you'll be fine using the puppeteer package.However, you should use puppeteer-core if:you're building another end-user product or library atop of DevTools protocol. For example, one might build a PDF generator using puppeteer-core and write a custom install.js script that downloads headless_shell instead of Chromium to save disk space.you're bundling Puppeteer to use in Chrome Extension / browser with the DevTools protocol where downloading an additional Chromium binary is unnecessary.you're building a set of tools where puppeteer-core is one of the ingredients and you want to postpone install.js script execution until Chromium is about to be used.When using puppeteer-core, remember to change the include line:const puppeteer = require('puppeteer-core');You will then need to call puppeteer.connect or puppeteer.launch with an explicit executablePath or channel option.Usage​Puppeteer follows the latest maintenance LTS version of Node.Puppeteer will be familiar to people using other browser testing frameworks. You create an instance\n                of Browser, open pages, and then manipulate them with Puppeteer's API.Example - navigating to https://example.com and saving a screenshot as example.png:Save file as example.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  await page.screenshot({path: 'example.png'});  await browser.close();})();Execute script on the command linenode example.jsPuppeteer sets an initial page size to 800×600px, which defines the screenshot size. The page size can be customized with Page.setViewport().Example - create a PDF.Save file as hn.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://news.ycombinator.com', {    waitUntil: 'networkidle2',  });  await page.pdf({path: 'hn.pdf', format: 'a4'});  await browser.close();})();Execute script on the command linenode hn.jsSee Page.pdf for more information about creating pdfs.Example - evaluate script in the context of the pageSave file as get-dimensions.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  // Get the \\\"viewport\\\" of the page, as reported by the page.  const dimensions = await page.evaluate(() => {    return {      width: document.documentElement.clientWidth,      height: document.documentElement.clientHeight,      deviceScaleFactor: window.devicePixelRatio,    };  });  console.log('Dimensions:', dimensions);  await browser.close();})();Execute script on the command linenode get-dimensions.jsSee Page.evaluate and related methods like Page.evaluateOnNewDocument and Page.exposeFunction.Working with Chrome Extensions​Puppeteer can be used for testing Chrome Extensions.cautionExtensions in Chrome / Chromium currently only work in non-headless mode and experimental Chrome headless mode.The following is code for getting a handle to the background page of an extension whose source is located in ./my-extension:const puppeteer = require('puppeteer');(async () => {  const pathToExtension = require('path').join(__dirname, 'my-extension');  const browser = await puppeteer.launch({    headless: 'chrome',    args: [      `--disable-extensions-except=${pathToExtension}`,      `--load-extension=${pathToExtension}`,    ],  });  const backgroundPageTarget = await browser.waitForTarget(    target => target.type() === 'background_page'  );  const backgroundPage = await backgroundPageTarget.page();  // Test the background page as you would any other page.  await browser.close();})();noteChrome Manifest V3 extensions have a background ServiceWorker of type 'service_worker', instead of a page of type 'background_page'.noteIt is not yet possible to test extension popups or content scripts.Default runtime settings​1. Uses Headless modePuppeteer launches Chromium in headless mode. To launch a full version of Chromium, set the headless option when launching a browser:const browser = await puppeteer.launch({headless: false}); // default is true2. Runs a bundled version of ChromiumBy default, Puppeteer downloads and uses a specific version of Chromium so its API\n                is guaranteed to work out of the box. To use Puppeteer with a different version of Chrome or Chromium,\n                pass in the executable's path when creating a Browser instance:const browser = await puppeteer.launch({executablePath: '/path/to/Chrome'});You can also use Puppeteer with Firefox Nightly (experimental support). See Puppeteer.launch for more information.See this article for a description of the differences between Chromium and Chrome. This article describes some differences for Linux users.3. Creates a fresh user profilePuppeteer creates its own browser user profile which it cleans up on every run.Resources​API DocumentationExamplesCommunity list of Puppeteer resourcesDebugging tips​Turn off headless mode - sometimes it's useful to see what the browser is\n                displaying. Instead of launching in headless mode, launch a full version of\n                the browser using headless: false:const browser = await puppeteer.launch({headless: false});Slow it down - the slowMo option slows down Puppeteer operations by the\n                specified amount of milliseconds. It's another way to help see what's going on.const browser = await puppeteer.launch({  headless: false,  slowMo: 250, // slow down by 250ms});Capture console output - You can listen for the console event.\n                This is also handy when debugging code in page.evaluate():page.on('console', msg => console.log('PAGE LOG:', msg.text()));await page.evaluate(() => console.log(`url is ${location.href}`));Use debugger in application code browserThere are two execution context: node.js that is running test code, and the browser\n                running application code being tested. This lets you debug code in the\n                application code browser; ie code inside evaluate().Use {devtools: true} when launching Puppeteer:const browser = await puppeteer.launch({devtools: true});Change default test timeout:jest: jest.setTimeout(100000);jasmine: jasmine.DEFAULT_TIMEOUT_INTERVAL = 100000;mocha: this.timeout(100000); (don't forget to change test to use function and not '=>')Add an evaluate statement with debugger inside / add debugger to an existing evaluate statement:await page.evaluate(() => {  debugger;});The test will now stop executing in the above evaluate statement, and chromium will stop in debug mode.Use debugger in node.jsThis will let you debug test code. For example, you can step over await page.click() in the node.js script and see the click happen in the application code browser.Note that you won't be able to run await page.click() in\n                DevTools console due to this Chromium bug. So if\n                you want to try something out, you have to add it to your test file.Add debugger; to your test, eg:debugger;await page.click('a[target=_blank]');Set headless to falseRun node --inspect-brk, eg node --inspect-brk node_modules/.bin/jest testsIn Chrome open chrome://inspect/#devices and click inspectIn the newly opened test browser, type F8 to resume test executionNow your debugger will be hit and you can debug in the test browserEnable verbose logging - internal DevTools protocol traffic\n                will be logged via the debug module under the puppeteer namespace. # Basic verbose logging env DEBUG=\\\"puppeteer:*\\\" node script.js # Protocol traffic can be rather noisy. This example filters out all Network domain messages env DEBUG=\\\"puppeteer:*\\\" env DEBUG_COLORS=true node script.js 2>&1 | grep -v '\\\"Network'Debug your Puppeteer (node) code easily, using ndbnpm install -g ndb (or even better, use npx!)add a debugger to your Puppeteer (node) codeadd ndb (or npx ndb) before your test command. For example:ndb jest or ndb mocha (or npx ndb jest / npx ndb mocha)debug your test inside chromium like a boss!Contributing​Check out our contributing guide to get an overview of Puppeteer development.FAQ​Our FAQ has migrated to our site.NextFAQCommunityStack OverflowTwitterYouTubeCopyright © 2022 Google, Inc.···\n                \"","time":{"start":1657029887902,"stop":1657029888783,"duration":881}},{"uid":"b65eaa0d465450b1","reportUrl":"https://camillomurcia.github.io/puppeteer-screenplay-jest-allure/76//#testresult/b65eaa0d465450b1","status":"failed","statusDetails":"Error: expect(received).toContain(expected) // indexOf\n                \n                Expected substring: \"Puppeter\"\n                Received string:    \"\n                !function(){function t(t){document.documentElement.setAttribute(\\\"data-theme\\\",t)}var e=function(){var t=null;try{t=localStorage.getItem(\\\"theme\\\")}catch(t){}return t}();t(null!==e?e:\\\"light\\\")}()Skip to main contentPuppeteer15.3.0Next15.3.0ctrlKPuppeteerVersionsNext15.3.0← Back to main menuPuppeteerFAQTroubleshootingContributingChromium SupportAPIPuppeteerVersion: 15.3.0On this pagePuppeteer API | FAQ | Contributing | Troubleshooting​Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. Puppeteer runs headless by default, but can be configured to run full (non-headless) Chrome or Chromium.What can I do?​Most things that you can do manually in the browser can be done using Puppeteer! Here are a few examples to get you started:Generate screenshots and PDFs of pages.Crawl a SPA (Single-Page Application) and generate pre-rendered content (i.e. \\\"SSR\\\" (Server-Side Rendering)).Automate form submission, UI testing, keyboard input, etc.Create an up-to-date, automated testing environment. Run your tests directly in the latest version of Chrome using the latest JavaScript and browser features.Capture a timeline trace of your site to help diagnose performance issues.Test Chrome Extensions.Getting Started​Installation​To use Puppeteer in your project, run:npm i puppeteer# or \\\"yarn add puppeteer\\\"When you install Puppeteer, it downloads a recent version of Chromium (~170MB Mac, ~282MB Linux, ~280MB Win) that is guaranteed to work with the API (customizable through Environment Variables). For a version of Puppeteer purely for connection, see puppeteer-core.Environment Variables​Puppeteer looks for certain environment variables to aid its operations.\n                If Puppeteer doesn't find them in the environment during the installation step, a lowercased variant of these variables will be used from the npm config.HTTP_PROXY, HTTPS_PROXY, NO_PROXY - defines HTTP proxy settings that are used to download and run the browser.PUPPETEER_SKIP_CHROMIUM_DOWNLOAD - do not download bundled Chromium during installation step.PUPPETEER_TMP_DIR - defines the directory to be used by Puppeteer for creating temporary files. Defaults to os.tmpdir().PUPPETEER_DOWNLOAD_HOST - overwrite URL prefix that is used to download Chromium. Note: this includes protocol and might even include path prefix. Defaults to https://storage.googleapis.com.PUPPETEER_DOWNLOAD_PATH - overwrite the path for the downloads folder. Defaults to <root>/.local-chromium, where <root> is Puppeteer's package root.PUPPETEER_CHROMIUM_REVISION - specify a certain version of Chromium you'd like Puppeteer to use. See puppeteer.launch on how executable path is inferred.PUPPETEER_EXECUTABLE_PATH - specify an executable path to be used in puppeteer.launch.PUPPETEER_PRODUCT - specify which browser you'd like Puppeteer to use. Must be one of chrome or firefox. This can also be used during installation to fetch the recommended browser binary. Setting product programmatically in puppeteer.launch supersedes this environment variable. The product is exposed in puppeteer.productPUPPETEER_EXPERIMENTAL_CHROMIUM_MAC_ARM — specify Puppeteer download Chromium for Apple M1. On Apple M1 devices Puppeteer by default downloads the version for Intel's processor which runs via Rosetta. It works without any problems, however, with this option, you should get more efficient resource usage (CPU and RAM) that could lead to a faster execution time.dangerPuppeteer is only guaranteed to work with the bundled Chromium, use at your own risk.cautionPUPPETEER_* env variables are not accounted for in puppeteer-core.puppeteer-core​Every release since v1.7.0 we publish two packages:puppeteerpuppeteer-corepuppeteer is a product for browser automation. When installed, it downloads a version of\n                Chromium, which it then drives using puppeteer-core. Being an end-user product, puppeteer supports a bunch of convenient PUPPETEER_* env variables to tweak its behavior.puppeteer-core is a library to help drive anything that supports DevTools protocol. puppeteer-core doesn't download Chromium when installed. Being a library, puppeteer-core is fully driven\n                through its programmatic interface and disregards all the PUPPETEER_* env variables.To sum up, the only differences between puppeteer-core and puppeteer are:puppeteer-core doesn't automatically download Chromium when installed.puppeteer-core ignores all PUPPETEER_* env variables.In most cases, you'll be fine using the puppeteer package.However, you should use puppeteer-core if:you're building another end-user product or library atop of DevTools protocol. For example, one might build a PDF generator using puppeteer-core and write a custom install.js script that downloads headless_shell instead of Chromium to save disk space.you're bundling Puppeteer to use in Chrome Extension / browser with the DevTools protocol where downloading an additional Chromium binary is unnecessary.you're building a set of tools where puppeteer-core is one of the ingredients and you want to postpone install.js script execution until Chromium is about to be used.When using puppeteer-core, remember to change the include line:const puppeteer = require('puppeteer-core');You will then need to call puppeteer.connect or puppeteer.launch with an explicit executablePath or channel option.Usage​Puppeteer follows the latest maintenance LTS version of Node.Puppeteer will be familiar to people using other browser testing frameworks. You create an instance\n                of Browser, open pages, and then manipulate them with Puppeteer's API.Example - navigating to https://example.com and saving a screenshot as example.png:Save file as example.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  await page.screenshot({path: 'example.png'});  await browser.close();})();Execute script on the command linenode example.jsPuppeteer sets an initial page size to 800×600px, which defines the screenshot size. The page size can be customized with Page.setViewport().Example - create a PDF.Save file as hn.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://news.ycombinator.com', {    waitUntil: 'networkidle2',  });  await page.pdf({path: 'hn.pdf', format: 'a4'});  await browser.close();})();Execute script on the command linenode hn.jsSee Page.pdf for more information about creating pdfs.Example - evaluate script in the context of the pageSave file as get-dimensions.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  // Get the \\\"viewport\\\" of the page, as reported by the page.  const dimensions = await page.evaluate(() => {    return {      width: document.documentElement.clientWidth,      height: document.documentElement.clientHeight,      deviceScaleFactor: window.devicePixelRatio,    };  });  console.log('Dimensions:', dimensions);  await browser.close();})();Execute script on the command linenode get-dimensions.jsSee Page.evaluate and related methods like Page.evaluateOnNewDocument and Page.exposeFunction.Working with Chrome Extensions​Puppeteer can be used for testing Chrome Extensions.cautionExtensions in Chrome / Chromium currently only work in non-headless mode and experimental Chrome headless mode.The following is code for getting a handle to the background page of an extension whose source is located in ./my-extension:const puppeteer = require('puppeteer');(async () => {  const pathToExtension = require('path').join(__dirname, 'my-extension');  const browser = await puppeteer.launch({    headless: 'chrome',    args: [      `--disable-extensions-except=${pathToExtension}`,      `--load-extension=${pathToExtension}`,    ],  });  const backgroundPageTarget = await browser.waitForTarget(    target => target.type() === 'background_page'  );  const backgroundPage = await backgroundPageTarget.page();  // Test the background page as you would any other page.  await browser.close();})();noteChrome Manifest V3 extensions have a background ServiceWorker of type 'service_worker', instead of a page of type 'background_page'.noteIt is not yet possible to test extension popups or content scripts.Default runtime settings​1. Uses Headless modePuppeteer launches Chromium in headless mode. To launch a full version of Chromium, set the headless option when launching a browser:const browser = await puppeteer.launch({headless: false}); // default is true2. Runs a bundled version of ChromiumBy default, Puppeteer downloads and uses a specific version of Chromium so its API\n                is guaranteed to work out of the box. To use Puppeteer with a different version of Chrome or Chromium,\n                pass in the executable's path when creating a Browser instance:const browser = await puppeteer.launch({executablePath: '/path/to/Chrome'});You can also use Puppeteer with Firefox Nightly (experimental support). See Puppeteer.launch for more information.See this article for a description of the differences between Chromium and Chrome. This article describes some differences for Linux users.3. Creates a fresh user profilePuppeteer creates its own browser user profile which it cleans up on every run.Resources​API DocumentationExamplesCommunity list of Puppeteer resourcesDebugging tips​Turn off headless mode - sometimes it's useful to see what the browser is\n                displaying. Instead of launching in headless mode, launch a full version of\n                the browser using headless: false:const browser = await puppeteer.launch({headless: false});Slow it down - the slowMo option slows down Puppeteer operations by the\n                specified amount of milliseconds. It's another way to help see what's going on.const browser = await puppeteer.launch({  headless: false,  slowMo: 250, // slow down by 250ms});Capture console output - You can listen for the console event.\n                This is also handy when debugging code in page.evaluate():page.on('console', msg => console.log('PAGE LOG:', msg.text()));await page.evaluate(() => console.log(`url is ${location.href}`));Use debugger in application code browserThere are two execution context: node.js that is running test code, and the browser\n                running application code being tested. This lets you debug code in the\n                application code browser; ie code inside evaluate().Use {devtools: true} when launching Puppeteer:const browser = await puppeteer.launch({devtools: true});Change default test timeout:jest: jest.setTimeout(100000);jasmine: jasmine.DEFAULT_TIMEOUT_INTERVAL = 100000;mocha: this.timeout(100000); (don't forget to change test to use function and not '=>')Add an evaluate statement with debugger inside / add debugger to an existing evaluate statement:await page.evaluate(() => {  debugger;});The test will now stop executing in the above evaluate statement, and chromium will stop in debug mode.Use debugger in node.jsThis will let you debug test code. For example, you can step over await page.click() in the node.js script and see the click happen in the application code browser.Note that you won't be able to run await page.click() in\n                DevTools console due to this Chromium bug. So if\n                you want to try something out, you have to add it to your test file.Add debugger; to your test, eg:debugger;await page.click('a[target=_blank]');Set headless to falseRun node --inspect-brk, eg node --inspect-brk node_modules/.bin/jest testsIn Chrome open chrome://inspect/#devices and click inspectIn the newly opened test browser, type F8 to resume test executionNow your debugger will be hit and you can debug in the test browserEnable verbose logging - internal DevTools protocol traffic\n                will be logged via the debug module under the puppeteer namespace. # Basic verbose logging env DEBUG=\\\"puppeteer:*\\\" node script.js # Protocol traffic can be rather noisy. This example filters out all Network domain messages env DEBUG=\\\"puppeteer:*\\\" env DEBUG_COLORS=true node script.js 2>&1 | grep -v '\\\"Network'Debug your Puppeteer (node) code easily, using ndbnpm install -g ndb (or even better, use npx!)add a debugger to your Puppeteer (node) codeadd ndb (or npx ndb) before your test command. For example:ndb jest or ndb mocha (or npx ndb jest / npx ndb mocha)debug your test inside chromium like a boss!Contributing​Check out our contributing guide to get an overview of Puppeteer development.FAQ​Our FAQ has migrated to our site.NextFAQCommunityStack OverflowTwitterYouTubeCopyright © 2022 Google, Inc.···\n                \"","time":{"start":1657029864567,"stop":1657029865528,"duration":961}},{"uid":"67349e2399b2a9d8","reportUrl":"https://camillomurcia.github.io/puppeteer-screenplay-jest-allure/75//#testresult/67349e2399b2a9d8","status":"failed","statusDetails":"Error: expect(received).toContain(expected) // indexOf\n                \n                Expected substring: \"Puppeter\"\n                Received string:    \"\n                !function(){function t(t){document.documentElement.setAttribute(\\\"data-theme\\\",t)}var e=function(){var t=null;try{t=localStorage.getItem(\\\"theme\\\")}catch(t){}return t}();t(null!==e?e:\\\"light\\\")}()Skip to main contentPuppeteer15.3.0Next15.3.0ctrlKPuppeteerVersionsNext15.3.0← Back to main menuPuppeteerFAQTroubleshootingContributingChromium SupportAPIPuppeteerVersion: 15.3.0On this pagePuppeteer API | FAQ | Contributing | Troubleshooting​Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. Puppeteer runs headless by default, but can be configured to run full (non-headless) Chrome or Chromium.What can I do?​Most things that you can do manually in the browser can be done using Puppeteer! Here are a few examples to get you started:Generate screenshots and PDFs of pages.Crawl a SPA (Single-Page Application) and generate pre-rendered content (i.e. \\\"SSR\\\" (Server-Side Rendering)).Automate form submission, UI testing, keyboard input, etc.Create an up-to-date, automated testing environment. Run your tests directly in the latest version of Chrome using the latest JavaScript and browser features.Capture a timeline trace of your site to help diagnose performance issues.Test Chrome Extensions.Getting Started​Installation​To use Puppeteer in your project, run:npm i puppeteer# or \\\"yarn add puppeteer\\\"When you install Puppeteer, it downloads a recent version of Chromium (~170MB Mac, ~282MB Linux, ~280MB Win) that is guaranteed to work with the API (customizable through Environment Variables). For a version of Puppeteer purely for connection, see puppeteer-core.Environment Variables​Puppeteer looks for certain environment variables to aid its operations.\n                If Puppeteer doesn't find them in the environment during the installation step, a lowercased variant of these variables will be used from the npm config.HTTP_PROXY, HTTPS_PROXY, NO_PROXY - defines HTTP proxy settings that are used to download and run the browser.PUPPETEER_SKIP_CHROMIUM_DOWNLOAD - do not download bundled Chromium during installation step.PUPPETEER_TMP_DIR - defines the directory to be used by Puppeteer for creating temporary files. Defaults to os.tmpdir().PUPPETEER_DOWNLOAD_HOST - overwrite URL prefix that is used to download Chromium. Note: this includes protocol and might even include path prefix. Defaults to https://storage.googleapis.com.PUPPETEER_DOWNLOAD_PATH - overwrite the path for the downloads folder. Defaults to <root>/.local-chromium, where <root> is Puppeteer's package root.PUPPETEER_CHROMIUM_REVISION - specify a certain version of Chromium you'd like Puppeteer to use. See puppeteer.launch on how executable path is inferred.PUPPETEER_EXECUTABLE_PATH - specify an executable path to be used in puppeteer.launch.PUPPETEER_PRODUCT - specify which browser you'd like Puppeteer to use. Must be one of chrome or firefox. This can also be used during installation to fetch the recommended browser binary. Setting product programmatically in puppeteer.launch supersedes this environment variable. The product is exposed in puppeteer.productPUPPETEER_EXPERIMENTAL_CHROMIUM_MAC_ARM — specify Puppeteer download Chromium for Apple M1. On Apple M1 devices Puppeteer by default downloads the version for Intel's processor which runs via Rosetta. It works without any problems, however, with this option, you should get more efficient resource usage (CPU and RAM) that could lead to a faster execution time.dangerPuppeteer is only guaranteed to work with the bundled Chromium, use at your own risk.cautionPUPPETEER_* env variables are not accounted for in puppeteer-core.puppeteer-core​Every release since v1.7.0 we publish two packages:puppeteerpuppeteer-corepuppeteer is a product for browser automation. When installed, it downloads a version of\n                Chromium, which it then drives using puppeteer-core. Being an end-user product, puppeteer supports a bunch of convenient PUPPETEER_* env variables to tweak its behavior.puppeteer-core is a library to help drive anything that supports DevTools protocol. puppeteer-core doesn't download Chromium when installed. Being a library, puppeteer-core is fully driven\n                through its programmatic interface and disregards all the PUPPETEER_* env variables.To sum up, the only differences between puppeteer-core and puppeteer are:puppeteer-core doesn't automatically download Chromium when installed.puppeteer-core ignores all PUPPETEER_* env variables.In most cases, you'll be fine using the puppeteer package.However, you should use puppeteer-core if:you're building another end-user product or library atop of DevTools protocol. For example, one might build a PDF generator using puppeteer-core and write a custom install.js script that downloads headless_shell instead of Chromium to save disk space.you're bundling Puppeteer to use in Chrome Extension / browser with the DevTools protocol where downloading an additional Chromium binary is unnecessary.you're building a set of tools where puppeteer-core is one of the ingredients and you want to postpone install.js script execution until Chromium is about to be used.When using puppeteer-core, remember to change the include line:const puppeteer = require('puppeteer-core');You will then need to call puppeteer.connect or puppeteer.launch with an explicit executablePath or channel option.Usage​Puppeteer follows the latest maintenance LTS version of Node.Puppeteer will be familiar to people using other browser testing frameworks. You create an instance\n                of Browser, open pages, and then manipulate them with Puppeteer's API.Example - navigating to https://example.com and saving a screenshot as example.png:Save file as example.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  await page.screenshot({path: 'example.png'});  await browser.close();})();Execute script on the command linenode example.jsPuppeteer sets an initial page size to 800×600px, which defines the screenshot size. The page size can be customized with Page.setViewport().Example - create a PDF.Save file as hn.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://news.ycombinator.com', {    waitUntil: 'networkidle2',  });  await page.pdf({path: 'hn.pdf', format: 'a4'});  await browser.close();})();Execute script on the command linenode hn.jsSee Page.pdf for more information about creating pdfs.Example - evaluate script in the context of the pageSave file as get-dimensions.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  // Get the \\\"viewport\\\" of the page, as reported by the page.  const dimensions = await page.evaluate(() => {    return {      width: document.documentElement.clientWidth,      height: document.documentElement.clientHeight,      deviceScaleFactor: window.devicePixelRatio,    };  });  console.log('Dimensions:', dimensions);  await browser.close();})();Execute script on the command linenode get-dimensions.jsSee Page.evaluate and related methods like Page.evaluateOnNewDocument and Page.exposeFunction.Working with Chrome Extensions​Puppeteer can be used for testing Chrome Extensions.cautionExtensions in Chrome / Chromium currently only work in non-headless mode and experimental Chrome headless mode.The following is code for getting a handle to the background page of an extension whose source is located in ./my-extension:const puppeteer = require('puppeteer');(async () => {  const pathToExtension = require('path').join(__dirname, 'my-extension');  const browser = await puppeteer.launch({    headless: 'chrome',    args: [      `--disable-extensions-except=${pathToExtension}`,      `--load-extension=${pathToExtension}`,    ],  });  const backgroundPageTarget = await browser.waitForTarget(    target => target.type() === 'background_page'  );  const backgroundPage = await backgroundPageTarget.page();  // Test the background page as you would any other page.  await browser.close();})();noteChrome Manifest V3 extensions have a background ServiceWorker of type 'service_worker', instead of a page of type 'background_page'.noteIt is not yet possible to test extension popups or content scripts.Default runtime settings​1. Uses Headless modePuppeteer launches Chromium in headless mode. To launch a full version of Chromium, set the headless option when launching a browser:const browser = await puppeteer.launch({headless: false}); // default is true2. Runs a bundled version of ChromiumBy default, Puppeteer downloads and uses a specific version of Chromium so its API\n                is guaranteed to work out of the box. To use Puppeteer with a different version of Chrome or Chromium,\n                pass in the executable's path when creating a Browser instance:const browser = await puppeteer.launch({executablePath: '/path/to/Chrome'});You can also use Puppeteer with Firefox Nightly (experimental support). See Puppeteer.launch for more information.See this article for a description of the differences between Chromium and Chrome. This article describes some differences for Linux users.3. Creates a fresh user profilePuppeteer creates its own browser user profile which it cleans up on every run.Resources​API DocumentationExamplesCommunity list of Puppeteer resourcesDebugging tips​Turn off headless mode - sometimes it's useful to see what the browser is\n                displaying. Instead of launching in headless mode, launch a full version of\n                the browser using headless: false:const browser = await puppeteer.launch({headless: false});Slow it down - the slowMo option slows down Puppeteer operations by the\n                specified amount of milliseconds. It's another way to help see what's going on.const browser = await puppeteer.launch({  headless: false,  slowMo: 250, // slow down by 250ms});Capture console output - You can listen for the console event.\n                This is also handy when debugging code in page.evaluate():page.on('console', msg => console.log('PAGE LOG:', msg.text()));await page.evaluate(() => console.log(`url is ${location.href}`));Use debugger in application code browserThere are two execution context: node.js that is running test code, and the browser\n                running application code being tested. This lets you debug code in the\n                application code browser; ie code inside evaluate().Use {devtools: true} when launching Puppeteer:const browser = await puppeteer.launch({devtools: true});Change default test timeout:jest: jest.setTimeout(100000);jasmine: jasmine.DEFAULT_TIMEOUT_INTERVAL = 100000;mocha: this.timeout(100000); (don't forget to change test to use function and not '=>')Add an evaluate statement with debugger inside / add debugger to an existing evaluate statement:await page.evaluate(() => {  debugger;});The test will now stop executing in the above evaluate statement, and chromium will stop in debug mode.Use debugger in node.jsThis will let you debug test code. For example, you can step over await page.click() in the node.js script and see the click happen in the application code browser.Note that you won't be able to run await page.click() in\n                DevTools console due to this Chromium bug. So if\n                you want to try something out, you have to add it to your test file.Add debugger; to your test, eg:debugger;await page.click('a[target=_blank]');Set headless to falseRun node --inspect-brk, eg node --inspect-brk node_modules/.bin/jest testsIn Chrome open chrome://inspect/#devices and click inspectIn the newly opened test browser, type F8 to resume test executionNow your debugger will be hit and you can debug in the test browserEnable verbose logging - internal DevTools protocol traffic\n                will be logged via the debug module under the puppeteer namespace. # Basic verbose logging env DEBUG=\\\"puppeteer:*\\\" node script.js # Protocol traffic can be rather noisy. This example filters out all Network domain messages env DEBUG=\\\"puppeteer:*\\\" env DEBUG_COLORS=true node script.js 2>&1 | grep -v '\\\"Network'Debug your Puppeteer (node) code easily, using ndbnpm install -g ndb (or even better, use npx!)add a debugger to your Puppeteer (node) codeadd ndb (or npx ndb) before your test command. For example:ndb jest or ndb mocha (or npx ndb jest / npx ndb mocha)debug your test inside chromium like a boss!Contributing​Check out our contributing guide to get an overview of Puppeteer development.FAQ​Our FAQ has migrated to our site.NextFAQCommunityStack OverflowTwitterYouTubeCopyright © 2022 Google, Inc.···\n                \"","time":{"start":1657029831453,"stop":1657029832570,"duration":1117}},{"uid":"3fd1bce914dd04cf","reportUrl":"https://camillomurcia.github.io/puppeteer-screenplay-jest-allure/74//#testresult/3fd1bce914dd04cf","status":"failed","statusDetails":"Error: TypeError: Cannot destructure property 'scrollWidth' of 'r.current' as it is null.\n                    at https://pptr.dev/assets/js/17896441.9e827a15.js:1:27297","time":{"start":1656900305768,"stop":1656900306966,"duration":1198}},{"uid":"ccead5596b47494d","reportUrl":"https://camillomurcia.github.io/puppeteer-screenplay-jest-allure/73//#testresult/ccead5596b47494d","status":"failed","statusDetails":"Error: expect(received).toContain(expected) // indexOf\n                \n                Expected substring: \"Puppeter\"\n                Received string:    \"\n                !function(){function t(t){document.documentElement.setAttribute(\\\"data-theme\\\",t)}var e=function(){var t=null;try{t=localStorage.getItem(\\\"theme\\\")}catch(t){}return t}();t(null!==e?e:\\\"light\\\")}()Skip to main contentPuppeteer15.3.0Next15.3.0ctrlKPuppeteerVersionsNext15.3.0← Back to main menuPuppeteerFAQTroubleshootingContributingChromium SupportAPIPuppeteerVersion: 15.3.0On this pagePuppeteer API | FAQ | Contributing | Troubleshooting​Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. Puppeteer runs headless by default, but can be configured to run full (non-headless) Chrome or Chromium.What can I do?​Most things that you can do manually in the browser can be done using Puppeteer! Here are a few examples to get you started:Generate screenshots and PDFs of pages.Crawl a SPA (Single-Page Application) and generate pre-rendered content (i.e. \\\"SSR\\\" (Server-Side Rendering)).Automate form submission, UI testing, keyboard input, etc.Create an up-to-date, automated testing environment. Run your tests directly in the latest version of Chrome using the latest JavaScript and browser features.Capture a timeline trace of your site to help diagnose performance issues.Test Chrome Extensions.Getting Started​Installation​To use Puppeteer in your project, run:npm i puppeteer# or \\\"yarn add puppeteer\\\"When you install Puppeteer, it downloads a recent version of Chromium (~170MB Mac, ~282MB Linux, ~280MB Win) that is guaranteed to work with the API (customizable through Environment Variables). For a version of Puppeteer purely for connection, see puppeteer-core.Environment Variables​Puppeteer looks for certain environment variables to aid its operations.\n                If Puppeteer doesn't find them in the environment during the installation step, a lowercased variant of these variables will be used from the npm config.HTTP_PROXY, HTTPS_PROXY, NO_PROXY - defines HTTP proxy settings that are used to download and run the browser.PUPPETEER_SKIP_CHROMIUM_DOWNLOAD - do not download bundled Chromium during installation step.PUPPETEER_TMP_DIR - defines the directory to be used by Puppeteer for creating temporary files. Defaults to os.tmpdir().PUPPETEER_DOWNLOAD_HOST - overwrite URL prefix that is used to download Chromium. Note: this includes protocol and might even include path prefix. Defaults to https://storage.googleapis.com.PUPPETEER_DOWNLOAD_PATH - overwrite the path for the downloads folder. Defaults to <root>/.local-chromium, where <root> is Puppeteer's package root.PUPPETEER_CHROMIUM_REVISION - specify a certain version of Chromium you'd like Puppeteer to use. See puppeteer.launch on how executable path is inferred.PUPPETEER_EXECUTABLE_PATH - specify an executable path to be used in puppeteer.launch.PUPPETEER_PRODUCT - specify which browser you'd like Puppeteer to use. Must be one of chrome or firefox. This can also be used during installation to fetch the recommended browser binary. Setting product programmatically in puppeteer.launch supersedes this environment variable. The product is exposed in puppeteer.productPUPPETEER_EXPERIMENTAL_CHROMIUM_MAC_ARM — specify Puppeteer download Chromium for Apple M1. On Apple M1 devices Puppeteer by default downloads the version for Intel's processor which runs via Rosetta. It works without any problems, however, with this option, you should get more efficient resource usage (CPU and RAM) that could lead to a faster execution time.dangerPuppeteer is only guaranteed to work with the bundled Chromium, use at your own risk.cautionPUPPETEER_* env variables are not accounted for in puppeteer-core.puppeteer-core​Every release since v1.7.0 we publish two packages:puppeteerpuppeteer-corepuppeteer is a product for browser automation. When installed, it downloads a version of\n                Chromium, which it then drives using puppeteer-core. Being an end-user product, puppeteer supports a bunch of convenient PUPPETEER_* env variables to tweak its behavior.puppeteer-core is a library to help drive anything that supports DevTools protocol. puppeteer-core doesn't download Chromium when installed. Being a library, puppeteer-core is fully driven\n                through its programmatic interface and disregards all the PUPPETEER_* env variables.To sum up, the only differences between puppeteer-core and puppeteer are:puppeteer-core doesn't automatically download Chromium when installed.puppeteer-core ignores all PUPPETEER_* env variables.In most cases, you'll be fine using the puppeteer package.However, you should use puppeteer-core if:you're building another end-user product or library atop of DevTools protocol. For example, one might build a PDF generator using puppeteer-core and write a custom install.js script that downloads headless_shell instead of Chromium to save disk space.you're bundling Puppeteer to use in Chrome Extension / browser with the DevTools protocol where downloading an additional Chromium binary is unnecessary.you're building a set of tools where puppeteer-core is one of the ingredients and you want to postpone install.js script execution until Chromium is about to be used.When using puppeteer-core, remember to change the include line:const puppeteer = require('puppeteer-core');You will then need to call puppeteer.connect or puppeteer.launch with an explicit executablePath or channel option.Usage​Puppeteer follows the latest maintenance LTS version of Node.Puppeteer will be familiar to people using other browser testing frameworks. You create an instance\n                of Browser, open pages, and then manipulate them with Puppeteer's API.Example - navigating to https://example.com and saving a screenshot as example.png:Save file as example.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  await page.screenshot({path: 'example.png'});  await browser.close();})();Execute script on the command linenode example.jsPuppeteer sets an initial page size to 800×600px, which defines the screenshot size. The page size can be customized with Page.setViewport().Example - create a PDF.Save file as hn.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://news.ycombinator.com', {    waitUntil: 'networkidle2',  });  await page.pdf({path: 'hn.pdf', format: 'a4'});  await browser.close();})();Execute script on the command linenode hn.jsSee Page.pdf for more information about creating pdfs.Example - evaluate script in the context of the pageSave file as get-dimensions.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  // Get the \\\"viewport\\\" of the page, as reported by the page.  const dimensions = await page.evaluate(() => {    return {      width: document.documentElement.clientWidth,      height: document.documentElement.clientHeight,      deviceScaleFactor: window.devicePixelRatio,    };  });  console.log('Dimensions:', dimensions);  await browser.close();})();Execute script on the command linenode get-dimensions.jsSee Page.evaluate and related methods like Page.evaluateOnNewDocument and Page.exposeFunction.Working with Chrome Extensions​Puppeteer can be used for testing Chrome Extensions.cautionExtensions in Chrome / Chromium currently only work in non-headless mode and experimental Chrome headless mode.The following is code for getting a handle to the background page of an extension whose source is located in ./my-extension:const puppeteer = require('puppeteer');(async () => {  const pathToExtension = require('path').join(__dirname, 'my-extension');  const browser = await puppeteer.launch({    headless: 'chrome',    args: [      `--disable-extensions-except=${pathToExtension}`,      `--load-extension=${pathToExtension}`,    ],  });  const backgroundPageTarget = await browser.waitForTarget(    target => target.type() === 'background_page'  );  const backgroundPage = await backgroundPageTarget.page();  // Test the background page as you would any other page.  await browser.close();})();noteChrome Manifest V3 extensions have a background ServiceWorker of type 'service_worker', instead of a page of type 'background_page'.noteIt is not yet possible to test extension popups or content scripts.Default runtime settings​1. Uses Headless modePuppeteer launches Chromium in headless mode. To launch a full version of Chromium, set the headless option when launching a browser:const browser = await puppeteer.launch({headless: false}); // default is true2. Runs a bundled version of ChromiumBy default, Puppeteer downloads and uses a specific version of Chromium so its API\n                is guaranteed to work out of the box. To use Puppeteer with a different version of Chrome or Chromium,\n                pass in the executable's path when creating a Browser instance:const browser = await puppeteer.launch({executablePath: '/path/to/Chrome'});You can also use Puppeteer with Firefox Nightly (experimental support). See Puppeteer.launch for more information.See this article for a description of the differences between Chromium and Chrome. This article describes some differences for Linux users.3. Creates a fresh user profilePuppeteer creates its own browser user profile which it cleans up on every run.Resources​API DocumentationExamplesCommunity list of Puppeteer resourcesDebugging tips​Turn off headless mode - sometimes it's useful to see what the browser is\n                displaying. Instead of launching in headless mode, launch a full version of\n                the browser using headless: false:const browser = await puppeteer.launch({headless: false});Slow it down - the slowMo option slows down Puppeteer operations by the\n                specified amount of milliseconds. It's another way to help see what's going on.const browser = await puppeteer.launch({  headless: false,  slowMo: 250, // slow down by 250ms});Capture console output - You can listen for the console event.\n                This is also handy when debugging code in page.evaluate():page.on('console', msg => console.log('PAGE LOG:', msg.text()));await page.evaluate(() => console.log(`url is ${location.href}`));Use debugger in application code browserThere are two execution context: node.js that is running test code, and the browser\n                running application code being tested. This lets you debug code in the\n                application code browser; ie code inside evaluate().Use {devtools: true} when launching Puppeteer:const browser = await puppeteer.launch({devtools: true});Change default test timeout:jest: jest.setTimeout(100000);jasmine: jasmine.DEFAULT_TIMEOUT_INTERVAL = 100000;mocha: this.timeout(100000); (don't forget to change test to use function and not '=>')Add an evaluate statement with debugger inside / add debugger to an existing evaluate statement:await page.evaluate(() => {  debugger;});The test will now stop executing in the above evaluate statement, and chromium will stop in debug mode.Use debugger in node.jsThis will let you debug test code. For example, you can step over await page.click() in the node.js script and see the click happen in the application code browser.Note that you won't be able to run await page.click() in\n                DevTools console due to this Chromium bug. So if\n                you want to try something out, you have to add it to your test file.Add debugger; to your test, eg:debugger;await page.click('a[target=_blank]');Set headless to falseRun node --inspect-brk, eg node --inspect-brk node_modules/.bin/jest testsIn Chrome open chrome://inspect/#devices and click inspectIn the newly opened test browser, type F8 to resume test executionNow your debugger will be hit and you can debug in the test browserEnable verbose logging - internal DevTools protocol traffic\n                will be logged via the debug module under the puppeteer namespace. # Basic verbose logging env DEBUG=\\\"puppeteer:*\\\" node script.js # Protocol traffic can be rather noisy. This example filters out all Network domain messages env DEBUG=\\\"puppeteer:*\\\" env DEBUG_COLORS=true node script.js 2>&1 | grep -v '\\\"Network'Debug your Puppeteer (node) code easily, using ndbnpm install -g ndb (or even better, use npx!)add a debugger to your Puppeteer (node) codeadd ndb (or npx ndb) before your test command. For example:ndb jest or ndb mocha (or npx ndb jest / npx ndb mocha)debug your test inside chromium like a boss!Contributing​Check out our contributing guide to get an overview of Puppeteer development.FAQ​Our FAQ has migrated to our site.NextFAQCommunityStack OverflowTwitterYouTubeCopyright © 2022 Google, Inc.···\n                \"","time":{"start":1656900264674,"stop":1656900265713,"duration":1039}},{"uid":"a0308d31ebdbc529","reportUrl":"https://camillomurcia.github.io/puppeteer-screenplay-jest-allure/72//#testresult/a0308d31ebdbc529","status":"failed","statusDetails":"Error: TypeError: Cannot destructure property 'scrollWidth' of 'r.current' as it is null.\n                    at https://pptr.dev/assets/js/17896441.9e827a15.js:1:27297","time":{"start":1656686978393,"stop":1656686979183,"duration":790}},{"uid":"7b3ad77825583d7e","reportUrl":"https://camillomurcia.github.io/puppeteer-screenplay-jest-allure/71//#testresult/7b3ad77825583d7e","status":"failed","statusDetails":"Error: TypeError: Cannot destructure property 'scrollWidth' of 'r.current' as it is null.\n                    at https://pptr.dev/assets/js/17896441.9e827a15.js:1:27297","time":{"start":1656686951548,"stop":1656686952344,"duration":796}},{"uid":"1382cf7f576b7abd","reportUrl":"https://camillomurcia.github.io/puppeteer-screenplay-jest-allure/70//#testresult/1382cf7f576b7abd","status":"failed","statusDetails":"Error: expect(received).toContain(expected) // indexOf\n                \n                Expected substring: \"Puppeter\"\n                Received string:    \"\n                !function(){function t(t){document.documentElement.setAttribute(\\\"data-theme\\\",t)}var e=function(){var t=null;try{t=localStorage.getItem(\\\"theme\\\")}catch(t){}return t}();t(null!==e?e:\\\"light\\\")}()Skip to main contentPuppeteerNextctrlKPuppeteerNext← Back to main menuPuppeteerFAQTroubleshootingContributingChromium SupportAPIPuppeteerOn this pagePuppeteer API | FAQ | Contributing | Troubleshooting​Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. Puppeteer runs headless by default, but can be configured to run full (non-headless) Chrome or Chromium.What can I do?​Most things that you can do manually in the browser can be done using Puppeteer! Here are a few examples to get you started:Generate screenshots and PDFs of pages.Crawl a SPA (Single-Page Application) and generate pre-rendered content (i.e. \\\"SSR\\\" (Server-Side Rendering)).Automate form submission, UI testing, keyboard input, etc.Create an up-to-date, automated testing environment. Run your tests directly in the latest version of Chrome using the latest JavaScript and browser features.Capture a timeline trace of your site to help diagnose performance issues.Test Chrome Extensions.Getting Started​Installation​To use Puppeteer in your project, run:npm i puppeteer# or \\\"yarn add puppeteer\\\"When you install Puppeteer, it downloads a recent version of Chromium (~170MB Mac, ~282MB Linux, ~280MB Win) that is guaranteed to work with the API (customizable through Environment Variables). For a version of Puppeteer purely for connection, see puppeteer-core.Environment Variables​Puppeteer looks for certain environment variables to aid its operations.\n                If Puppeteer doesn't find them in the environment during the installation step, a lowercased variant of these variables will be used from the npm config.HTTP_PROXY, HTTPS_PROXY, NO_PROXY - defines HTTP proxy settings that are used to download and run the browser.PUPPETEER_SKIP_CHROMIUM_DOWNLOAD - do not download bundled Chromium during installation step.PUPPETEER_TMP_DIR - defines the directory to be used by Puppeteer for creating temporary files. Defaults to os.tmpdir().PUPPETEER_DOWNLOAD_HOST - overwrite URL prefix that is used to download Chromium. Note: this includes protocol and might even include path prefix. Defaults to https://storage.googleapis.com.PUPPETEER_DOWNLOAD_PATH - overwrite the path for the downloads folder. Defaults to <root>/.local-chromium, where <root> is Puppeteer's package root.PUPPETEER_CHROMIUM_REVISION - specify a certain version of Chromium you'd like Puppeteer to use. See puppeteer.launch on how executable path is inferred.PUPPETEER_EXECUTABLE_PATH - specify an executable path to be used in puppeteer.launch.PUPPETEER_PRODUCT - specify which browser you'd like Puppeteer to use. Must be one of chrome or firefox. This can also be used during installation to fetch the recommended browser binary. Setting product programmatically in puppeteer.launch supersedes this environment variable. The product is exposed in puppeteer.productPUPPETEER_EXPERIMENTAL_CHROMIUM_MAC_ARM — specify Puppeteer download Chromium for Apple M1. On Apple M1 devices Puppeteer by default downloads the version for Intel's processor which runs via Rosetta. It works without any problems, however, with this option, you should get more efficient resource usage (CPU and RAM) that could lead to a faster execution time.dangerPuppeteer is only guaranteed to work with the bundled Chromium, use at your own risk.cautionPUPPETEER_* env variables are not accounted for in puppeteer-core.puppeteer-core​Every release since v1.7.0 we publish two packages:puppeteerpuppeteer-corepuppeteer is a product for browser automation. When installed, it downloads a version of\n                Chromium, which it then drives using puppeteer-core. Being an end-user product, puppeteer supports a bunch of convenient PUPPETEER_* env variables to tweak its behavior.puppeteer-core is a library to help drive anything that supports DevTools protocol. puppeteer-core doesn't download Chromium when installed. Being a library, puppeteer-core is fully driven\n                through its programmatic interface and disregards all the PUPPETEER_* env variables.To sum up, the only differences between puppeteer-core and puppeteer are:puppeteer-core doesn't automatically download Chromium when installed.puppeteer-core ignores all PUPPETEER_* env variables.In most cases, you'll be fine using the puppeteer package.However, you should use puppeteer-core if:you're building another end-user product or library atop of DevTools protocol. For example, one might build a PDF generator using puppeteer-core and write a custom install.js script that downloads headless_shell instead of Chromium to save disk space.you're bundling Puppeteer to use in Chrome Extension / browser with the DevTools protocol where downloading an additional Chromium binary is unnecessary.you're building a set of tools where puppeteer-core is one of the ingredients and you want to postpone install.js script execution until Chromium is about to be used.When using puppeteer-core, remember to change the include line:const puppeteer = require('puppeteer-core');You will then need to call puppeteer.connect or puppeteer.launch with an explicit executablePath or channel option.Usage​Puppeteer follows the latest maintenance LTS version of Node.Puppeteer will be familiar to people using other browser testing frameworks. You create an instance\n                of Browser, open pages, and then manipulate them with Puppeteer's API.Example - navigating to https://example.com and saving a screenshot as example.png:Save file as example.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  await page.screenshot({path: 'example.png'});  await browser.close();})();Execute script on the command linenode example.jsPuppeteer sets an initial page size to 800×600px, which defines the screenshot size. The page size can be customized with Page.setViewport().Example - create a PDF.Save file as hn.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://news.ycombinator.com', {    waitUntil: 'networkidle2',  });  await page.pdf({path: 'hn.pdf', format: 'a4'});  await browser.close();})();Execute script on the command linenode hn.jsSee Page.pdf for more information about creating pdfs.Example - evaluate script in the context of the pageSave file as get-dimensions.jsconst puppeteer = require('puppeteer');(async () => {  const browser = await puppeteer.launch();  const page = await browser.newPage();  await page.goto('https://example.com');  // Get the \\\"viewport\\\" of the page, as reported by the page.  const dimensions = await page.evaluate(() => {    return {      width: document.documentElement.clientWidth,      height: document.documentElement.clientHeight,      deviceScaleFactor: window.devicePixelRatio,    };  });  console.log('Dimensions:', dimensions);  await browser.close();})();Execute script on the command linenode get-dimensions.jsSee Page.evaluate and related methods like Page.evaluateOnNewDocument and Page.exposeFunction.Working with Chrome Extensions​Puppeteer can be used for testing Chrome Extensions.cautionExtensions in Chrome / Chromium currently only work in non-headless mode and experimental Chrome headless mode.The following is code for getting a handle to the background page of an extension whose source is located in ./my-extension:const puppeteer = require('puppeteer');(async () => {  const pathToExtension = require('path').join(__dirname, 'my-extension');  const browser = await puppeteer.launch({    headless: 'chrome',    args: [      `--disable-extensions-except=${pathToExtension}`,      `--load-extension=${pathToExtension}`,    ],  });  const backgroundPageTarget = await browser.waitForTarget(    target => target.type() === 'background_page'  );  const backgroundPage = await backgroundPageTarget.page();  // Test the background page as you would any other page.  await browser.close();})();noteChrome Manifest V3 extensions have a background ServiceWorker of type 'service_worker', instead of a page of type 'background_page'.noteIt is not yet possible to test extension popups or content scripts.Default runtime settings​1. Uses Headless modePuppeteer launches Chromium in headless mode. To launch a full version of Chromium, set the headless option when launching a browser:const browser = await puppeteer.launch({headless: false}); // default is true2. Runs a bundled version of ChromiumBy default, Puppeteer downloads and uses a specific version of Chromium so its API\n                is guaranteed to work out of the box. To use Puppeteer with a different version of Chrome or Chromium,\n                pass in the executable's path when creating a Browser instance:const browser = await puppeteer.launch({executablePath: '/path/to/Chrome'});You can also use Puppeteer with Firefox Nightly (experimental support). See Puppeteer.launch for more information.See this article for a description of the differences between Chromium and Chrome. This article describes some differences for Linux users.3. Creates a fresh user profilePuppeteer creates its own browser user profile which it cleans up on every run.Resources​API DocumentationExamplesCommunity list of Puppeteer resourcesDebugging tips​Turn off headless mode - sometimes it's useful to see what the browser is\n                displaying. Instead of launching in headless mode, launch a full version of\n                the browser using headless: false:const browser = await puppeteer.launch({headless: false});Slow it down - the slowMo option slows down Puppeteer operations by the\n                specified amount of milliseconds. It's another way to help see what's going on.const browser = await puppeteer.launch({  headless: false,  slowMo: 250, // slow down by 250ms});Capture console output - You can listen for the console event.\n                This is also handy when debugging code in page.evaluate():page.on('console', msg => console.log('PAGE LOG:', msg.text()));await page.evaluate(() => console.log(`url is ${location.href}`));Use debugger in application code browserThere are two execution context: node.js that is running test code, and the browser\n                running application code being tested. This lets you debug code in the\n                application code browser; ie code inside evaluate().Use {devtools: true} when launching Puppeteer:const browser = await puppeteer.launch({devtools: true});Change default test timeout:jest: jest.setTimeout(100000);jasmine: jasmine.DEFAULT_TIMEOUT_INTERVAL = 100000;mocha: this.timeout(100000); (don't forget to change test to use function and not '=>')Add an evaluate statement with debugger inside / add debugger to an existing evaluate statement:await page.evaluate(() => {  debugger;});The test will now stop executing in the above evaluate statement, and chromium will stop in debug mode.Use debugger in node.jsThis will let you debug test code. For example, you can step over await page.click() in the node.js script and see the click happen in the application code browser.Note that you won't be able to run await page.click() in\n                DevTools console due to this Chromium bug. So if\n                you want to try something out, you have to add it to your test file.Add debugger; to your test, eg:debugger;await page.click('a[target=_blank]');Set headless to falseRun node --inspect-brk, eg node --inspect-brk node_modules/.bin/jest testsIn Chrome open chrome://inspect/#devices and click inspectIn the newly opened test browser, type F8 to resume test executionNow your debugger will be hit and you can debug in the test browserEnable verbose logging - internal DevTools protocol traffic\n                will be logged via the debug module under the puppeteer namespace. # Basic verbose logging env DEBUG=\\\"puppeteer:*\\\" node script.js # Protocol traffic can be rather noisy. This example filters out all Network domain messages env DEBUG=\\\"puppeteer:*\\\" env DEBUG_COLORS=true node script.js 2>&1 | grep -v '\\\"Network'Debug your Puppeteer (node) code easily, using ndbnpm install -g ndb (or even better, use npx!)add a debugger to your Puppeteer (node) codeadd ndb (or npx ndb) before your test command. For example:ndb jest or ndb mocha (or npx ndb jest / npx ndb mocha)debug your test inside chromium like a boss!Contributing​Check out our contributing guide to get an overview of Puppeteer development.FAQ​Our FAQ has migrated to our site.NextFAQCommunityStack OverflowTwitterYouTubeCopyright © 2022 Google, Inc.···\n                \"","time":{"start":1656686884741,"stop":1656686885460,"duration":719}},{"uid":"edc740795de40fd9","reportUrl":"https://camillomurcia.github.io/puppeteer-screenplay-jest-allure/68//#testresult/edc740795de40fd9","status":"failed","statusDetails":"Error: expect(received).toContain(expected) // indexOf\n                \n                Expected substring: \"Puppeter\"\n                Received string:    \"Please give us a few seconds to download Puppeteer releases for the first time.\n                 Next time we'll do it in background.\"","time":{"start":1656552851111,"stop":1656552851792,"duration":681}},{"uid":"92de9a42c162f2fc","reportUrl":"https://camillomurcia.github.io/puppeteer-screenplay-jest-allure/67//#testresult/92de9a42c162f2fc","status":"failed","statusDetails":"Error: expect(received).toContain(expected) // indexOf\n                \n                Expected substring: \"Puppeter\"\n                Received string:    \"Please give us a few seconds to download Puppeteer releases for the first time.\n                 Next time we'll do it in background.\"","time":{"start":1656552811707,"stop":1656552812046,"duration":339}},{"uid":"d83332ca2d9ef15","reportUrl":"https://camillomurcia.github.io/puppeteer-screenplay-jest-allure/66//#testresult/d83332ca2d9ef15","status":"failed","statusDetails":"Error: expect(received).toContain(expected) // indexOf\n                \n                Expected substring: \"Puppeter\"\n                Received string:    \"Please give us a few seconds to download Puppeteer releases for the first time.\n                 Next time we'll do it in background.\"","time":{"start":1656296012841,"stop":1656296013182,"duration":341}},{"uid":"d396656575318651","reportUrl":"https://camillomurcia.github.io/puppeteer-screenplay-jest-allure/65//#testresult/d396656575318651","status":"failed","statusDetails":"Error: expect(received).toContain(expected) // indexOf\n                \n                Expected substring: \"Puppeter\"\n                Received string:    \"\"","time":{"start":1656035385479,"stop":1656035385879,"duration":400}},{"uid":"4c8ab759ddb3e48b","reportUrl":"https://camillomurcia.github.io/puppeteer-screenplay-jest-allure/64//#testresult/4c8ab759ddb3e48b","status":"failed","statusDetails":"Error: expect(received).toContain(expected) // indexOf\n                \n                Expected substring: \"Puppeter\"\n                Received string:    \"Please give us a few seconds to download Puppeteer releases for the first time.\n                 Next time we'll do it in background.\"","time":{"start":1655840438895,"stop":1655840439612,"duration":717}}]},"tags":[]},"source":"8712d041048e09ec.json","parameterValues":[]}